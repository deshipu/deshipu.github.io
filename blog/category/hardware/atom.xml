<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://dopieralski.pl/</id>
  <title>dopieralski.pl - Posts in hardware</title>
  <updated>2025-07-08T12:18:52.298833+00:00</updated>
  <link href="http://dopieralski.pl/"/>
  <link href="http://dopieralski.pl/blog/category/hardware/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://dopieralski.pl/posts/2021-12-19-small-robots/</id>
    <title>Build Small Robots</title>
    <updated>2021-12-19T00:00:00+01:00</updated>
    <content type="html">&lt;section id="build-small-robots"&gt;

&lt;p&gt;In which we learn why it’s much easier to build small robots than large ones.&lt;/p&gt;
&lt;section id="the-cube-law"&gt;
&lt;h2&gt;The Cube Law&lt;/h2&gt;
&lt;p&gt;A lot of reasons for making your robots small comes from the cube law. This law
gives you the relation between the size of an object and its volume (there is
also the square law, that gives you the relation between the size and the
area). It says that as your robot grows in size, its volume will grow
proportionally to the third power of that size (also called cube, hence the
law’s name). Consider the following two example robots:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Dimensions 5×5×5cm, volume 125cm³, weight 125g&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dimensions 10×10×10cm, volume 1000cm³, weight 1000g&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(I’m assuming that in both cases the average density of the robot doesn’t
change, that is, that it’s not almost empty in the second case. As we will see
later, that’s quite accurate, or even optimistic.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="actuator-strength"&gt;
&lt;h2&gt;Actuator Strength&lt;/h2&gt;
&lt;p&gt;“Actuator” is a fancy name for whatever makes your robot move: servo, motor,
artificial muscle, memory metal, hydraulics, pneumatics, etc. As the size and
weight of your robot grows, so has to the strength of the actuators it uses.&lt;/p&gt;
&lt;p&gt;For instance, consider a servo. Its strength (in this case called torque) is
usually expressed in kilograms (of force) times centimeters, or newton meters.
If a servo has 1kg×cm of torque, it means it can lift 1kg of weight on a 1cm
long lever. Since the levers scale linearly, it means it could also lift 0.5kg
on 2cm long lever, or 2kg on 0.5cm long lever, etc. You can see already that if
you make the robot’s legs twice as long, you will need twice as much torque.
But that’s assuming that the weight remains the same. From the cube law you
know, that the weight is going to grow fast, so in reality larger robots will
need a lot more torque.&lt;/p&gt;
&lt;p&gt;But there is another thing. The smaller the servos, the lighter and cheaper
they are. Sure, the torque also gets smaller, but not nearly as fast. Consider
those two example servos:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;HK-282A Ultra-Micro Servo: weight 2.2g, torque 0.11kg*cm, price 3 EUR&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S3027 Metal Gear Servo: weight 20g, torque 2.5kg*cm, price 20 EUR&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, the smaller servo can raise itself on a lever half a meter
long! The larger one, almost 10 times heavier and over 20 times stronger, can
only do 125cm. And it will be similar with any other parameter: price, speed,
amount of current needed, etc. At some point the parameters will be so bad,
that you will have to switch to hydraulics.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="material-strength"&gt;
&lt;h2&gt;Material Strength&lt;/h2&gt;
&lt;p&gt;It’s not just the actuators that need to be stronger. They are connected to the
structural elements, that have to bear all that force too. And thanks to the
cube law, it doesn’t suffice for them to be just longer and thicker – they
actually have to be made from stronger and lighter materials.&lt;/p&gt;
&lt;p&gt;Stronger materials are harder to machine and generally work with. You can no
longer get away with hot-gluing parts together: you will need nuts and bolts,
and possibly also special mechanical design. And you will need specialized
tools.&lt;/p&gt;
&lt;p&gt;And when you finally get your robot together, it will be very fragile. Why do
you think all those large robots in laboratories always operate with a safety
line hanging from the ceiling over them? That’s because if they fall down, they
will smash into pieces. The materials they use are strong enough to hold them
together, but not strong enough to survive a fall.&lt;/p&gt;
&lt;p&gt;On the other hand, my smallest robots survived repeated falls from my desk to
the floor without even a scratch. If you make a robot the size of a cockroach,
you can drop it from the roof of a building. It will simply not gain enough
speed falling through the air to damage it on impacting the floor.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="inertia"&gt;
&lt;h2&gt;Inertia&lt;/h2&gt;
&lt;p&gt;So you finished your large robot, and now you are programming it. For a start,
you just make the limbs move straight to their destinations and stopping once
they get there. Your robot falls, the limbs break off, the servos strip gears
and there are huge spikes of current drawn from the battery. What happens?&lt;/p&gt;
&lt;p&gt;Well, you cannot just move a heavy object with high speed and then have it stop
instantly. Inertia will make it keep on moving, and the servomechanisms will
need to do a lot of extra work (and endure great forces of stress) to stop it
and move it back where it belongs. That also applies when moving the whole body
of the robot while walking – your effective Zero Movement Point no longer
coincides with the center of mass of your robot. You have to start taking the
speed and acceleration into consideration in your motion planning, and thus all
your movement equations become second degree differential equations without a
closed-form solution. Yay!&lt;/p&gt;
&lt;p&gt;On the other hand, if you keep the robot small, all its elements light and the
servos have abundance of power, you can pretty much ignore inertia and get away
with writing much simpler code that only takes into account the current
positions of the limbs.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="safety"&gt;
&lt;h2&gt;Safety&lt;/h2&gt;
&lt;p&gt;So you think you have the budget, you have the materials and tools, you have
the programming expertise and strong servos to handle the inertia, what could
possibly happen.&lt;/p&gt;
&lt;p&gt;Strong servos, larger batteries, high currents, long reach of the limbs, high
movement speeds – it all means trouble. You will need safety measures. Force
stop buttons, one on the robot itself (hardware, brutally cutting the power),
and one remote (so that you don’t have to chase your robot through a hole in
made in the wall). Suspensions mechanisms. Safety gear for you to wear. Fire
extinguisher capable of containing a LiPo battery fire. Circuit breakers.
Someone to check periodically if you are trapped under your robot’s weight…&lt;/p&gt;
&lt;p&gt;It’s all extra work, extra cost and extra risk. Why take it, if you can instead
have a robot the size of a hamster that behaves funny when something goes
wrong, and tickles instead of crushing your bones?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="convenience"&gt;
&lt;h2&gt;Convenience&lt;/h2&gt;
&lt;p&gt;I left the most important reason for the end. Small robots are convenient.&lt;/p&gt;
&lt;p&gt;You can work with them directly on your desktop, connect them to your computer,
adjust easily with just a screwdriver. You can store them in your drawer. You
can recharge them from your phone charger. You can take them with you to
conferences and workshops. You can fly with them in your carry-on baggage (as
long as they don’t have anything that looks like a clock on them). When
something goes wrong or breaks, you can simply pick them up and fix.&lt;/p&gt;
&lt;p&gt;Not so easy with larger robots. You will need to test them on the floor, in a
garage or even outside. You will need a complete suite of tools to work on
them, and a dedicated storage space to keep them. Special battery charger.
Taking them anywhere involves careful packaging or even loading onto a car. For
flight, you have to remove anything that is sensitive to low temperature and
pressure, as it’s going to go in the check-in baggage. Also be prepared to have
to re-fasten all the screws on it that came loose due to vibrations. When
something goes wrong or breaks, you have to call the mason to fix your house…&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Make your robots as small, as practically possible.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://dopieralski.pl/posts/2021-12-19-small-robots/" rel="alternate"/>
    <summary>In which we learn why it’s much easier to build small robots than large ones.</summary>
    <published>2021-12-19T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://dopieralski.pl/posts/2025-07-08-wishes/</id>
    <title>My Tech Wishes for 2025</title>
    <updated>2025-07-08T00:00:00+02:00</updated>
    <content type="html">&lt;section id="my-tech-wishes-for-2025"&gt;

&lt;p&gt;I know it’s a bit late in the year for this kind of post, but I have been busy
with other things. In any case, I decided to make it about general technology
related wishes, and not just CircuitPython, but large part of this is going to
be about CircuitPython anyways. Or at least related.&lt;/p&gt;
&lt;section id="media-transfer-protocol"&gt;
&lt;h2&gt;Media Transfer Protocol&lt;/h2&gt;
&lt;p&gt;Exposing your microcontroller to the computer it is connected to as a disk
drive is getting really popular now. And it makes a lot of sense too — it doesn’t require you to install any drivers or programs, it easy to understand, and
very convenient. CircuitPython does it too and I love it. But it does introduce
a number of problems:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;You have to use a filesystem that is supported on most operating system, and
with the small sizes you have, it’s usually FAT12, which is not great for
flash wearing off or fragmentation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Since diskettes are not as common anymore, proprietary operating systems
don’t have their implementations of FAT12 tested as well as other things,
which means there are lots of bugs in MacOS and Windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Tools like virus scanners or disk monitors see those drives as regular disks
and often interact with them in ways that breaks them.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can write to the disk only from one side, either through USB, or from
your code on the device, but not both at the same time.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of those problems could be trivially solved if we could only use the MTP
protocol instead of exposing the disk as a physical device with USB MSC. MTP
uses commands to manipulate the files, kinda like FTP, instead of writing to
the disk directly, and writes themselves are done by the microcontroller
itself, so it’s easy to use any custom filesystem you want, and to ensure
proper interactions when multiple operations are happening from different
sources.&lt;/p&gt;
&lt;p&gt;There is only one problem, and that is iTunes. You see, back when Apple’s flag
product was a music player, they were very jealous about it, and they tried
very hard to “protect” their users from using any other music player. They made
sure their player uses a custom, proprietary protocol for transferring the
music collection, and they also made sure that Apple computers didn’t support
transferring of arbitrary files using MTP. They had a problem in that most
cameras were already using MTP to transfer photos, and their users needed that,
so they made it an exception: you can use MTP on a Mac, but only for
transferring image files, and not any other file. Neat, eh?&lt;/p&gt;
&lt;p&gt;Today you can only find iPads in museums, and iTunes is just a memory in some
boomer nightmares, but the decision they made back then stays. No arbitrary
files with MTP, if you use a Mac, you have to install a special program to use
MTP for anything else than photos. So any microcontroller device that uses MTP
would not work out of the box on Apple products, which means that nobody does
it.&lt;/p&gt;
&lt;p&gt;So my wish is for someone at Apple to revise that decision, recognize how
stupid and harmful it was, and remove that stupid limitation from all of their
operating systems, thank you very much. I would also like to see some ready to
use libraries and examples for using MTP, but that will surely come once it’s
usable.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="circuitpython-on-ch32v208"&gt;
&lt;h2&gt;CircuitPython on CH32V208&lt;/h2&gt;
&lt;p&gt;This is something I would love to do myself, but I’m scared to even start, as
it is a huge amount of work, and just outside of my comfort zone. Basically,
the bluetooth versions of the CH32 chips tend to have a lot of memory for the
bluetooth stack, and that makes it theoretically possible to run CircuitPython
or LUA on them (as long as we don’t need the bluetooth). It’s a nice cheap
chip, and it would be perfect as a replacement for the SAMD21 chips I currently
use for the PewPew devices.&lt;/p&gt;
&lt;p&gt;Of course porting whole CircuitPython to a new chip is a lot of work, and it’s
something I have never done before, so naturally it’s scary. But people do it,
so it’s definitely possible.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="voice-synthesis"&gt;
&lt;h2&gt;Voice Synthesis&lt;/h2&gt;
&lt;p&gt;After my failed attempts to port the SAM voice synthesiser from MicroBit to
CircuitPython, I’m happy to see that someone ported it to MicroPython, but
not as a C library, as I wanted to do, but literally rewrote it in Python.
Now I need to take it and see if it works in CircuitPython as well. Then I can
make my robots speak.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="servo-controller-on-ch32v003"&gt;
&lt;h2&gt;Servo Controller on CH32V003&lt;/h2&gt;
&lt;p&gt;This one I’m actually perfectly capable of finishing on my own, I just need to
find the energy to work on it. I basically want to control 16 servos with good
resolution using PWM signals specified through I2C. I already have the PWM part
working, and there are plenty of examples for I2C slave. It’s just a question
of sitting down and actually writing the code.&lt;/p&gt;
&lt;p&gt;Once I have it, I can use it in the future versions of FluffBug and WeeBug, and
also a robot for the new small OpenMV board. It would free up 8 pins on the
Xiao, which could then be used for a display or I2S amplifier. It would also
allow for connecting additional servos, for things like arms or moving
features.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="led-matrices-on-ch32v003"&gt;
&lt;h2&gt;LED Matrices on CH32V003&lt;/h2&gt;
&lt;p&gt;I also have two projects with LED matrices for the CH32V003 that I still need
to program. One is a spectrum analyzer thing, and the hard part is the FFT
code for it (though there are plenty of examples), and the other is a business
card fake PewPew—not really running CircuitPython, but with some of the
PewPew games implemented directly in C and hardcoded in the device.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="gif-pendant"&gt;
&lt;h2&gt;GIF Pendant&lt;/h2&gt;
&lt;p&gt;Finally, I’m also still working on my GIF pendant project. Now with a round
screen and CH32V208 as the brains. I have a TinyUSB example for USB MSC in
RAM working on it. What I need to figure out how to put the storage on the
internal flash instead, and how to access it from the code to render those
GIF files onto the screen. Again, it’s something I have never done, and there
isn’t much documentation about it around, so it’s a lot of trial and error.
I wish someone who is more knowledgable about TinyUSB and USB MSC could help
me with that.&lt;/p&gt;
&lt;p&gt;And that’s pretty much it for me for 2025. It’s mostly projects I would like
to finish (or would like someone to finish for me), except for that Apple MTP
thing. Will I get any of my wishes come true? We will see.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://dopieralski.pl/posts/2025-07-08-wishes/" rel="alternate"/>
    <summary>I know it’s a bit late in the year for this kind of post, but I have been busy
with other things. In any case, I decided to make it about general technology
related wishes, and not just CircuitPython, but large part of this is going to
be about CircuitPython anyways. Or at least related.</summary>
    <published>2025-07-08T00:00:00+02:00</published>
  </entry>
</feed>
