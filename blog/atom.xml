<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://dopieralski.pl/</id>
  <title>dopieralski.pl</title>
  <updated>2024-08-10T10:52:13.209054+00:00</updated>
  <link href="http://dopieralski.pl/"/>
  <link href="http://dopieralski.pl/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://dopieralski.pl/posts/2020-06-21-snowball/</id>
    <title>Progress Mechanics</title>
    <updated>2020-06-21T00:00:00+02:00</updated>
    <content type="html">&lt;section id="progress-mechanics"&gt;

&lt;p&gt;Progress is an important mechanic in computer games. Not only it gives us a
reason to play the game, but it also serves as a way of communicating how
well we are playing. It can also serve several other purposes.&lt;/p&gt;
&lt;section id="reward-spiral"&gt;
&lt;h2&gt;Reward Spiral&lt;/h2&gt;
&lt;p&gt;One of the most obvious ways of implementing progress is to simply reward the
player with experience points, better equipment, or other resources as they
complete fragments of the game. Defeating opponents, completing quests,
arriving in a new area, finding hidden treasures, etc. can all be used for this
purpose. However, there is a danger in this if the rewards are useful in terms
of the gameplay mechanics – they make the game easier.&lt;/p&gt;
&lt;p&gt;Making the game easier as the player progresses is bad in single-player games
because it often makes the game boring – the initial challenge, when finally
overcome, becomes a mindless grind to get more of the rewards, with little
actual skill required. To counter that, game designers will often try to offset
player progress with stronger monsters and harder levels – so that even though
the player character gets more powerful, so do the obstacles. This results in a
kind of a power inflation phenomenon. It requires careful balancing, because a
small random fluctuation can leave the player facing unrealistic challenges, or
catapult them into too easy a game, staying just ahead of the difficulty.&lt;/p&gt;
&lt;p&gt;While bad in single-player games, in competitive multi-player games this
mechanic is often devastating. Whichever player manages to get even a tiny
advantage, through skill or luck, gets catapulted ahead of the other players,
and leaves them in the dust with no hope of winning, except maybe for a
desperate gamble to get ahead in the initial stages. You can see that in action
particularly well in the board game Monopoly, which was actually designed to
demonstrate the problem.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="optimal-tactics"&gt;
&lt;h2&gt;Optimal Tactics&lt;/h2&gt;
&lt;p&gt;When playing a game in which rewards make the game easier, there is no longer a
dilemma between sharpening your axe or cutting the tree. When you have to
choose between gaining more power or doing something useful, you always have to
choose more power. Anybody who diverts even a tiny bit of their gains into
something else than immediate growth will fall back on the growth curve behind
their opponents and lose the game. Power is the only thing worth fighting for.&lt;/p&gt;
&lt;p&gt;The game is won or lost in the initial stages. Your best tactic is to optimize
for short-time advantages, keeping yourself alive and as close to the point
where the exponential growth begins, in the hope that a random fluctuation will
boost you onto the path to victory. Sometimes you might even be able to see the
fluctuation coming, or even to arrange it to happen, but there is still an
element of randomness here, as some other player might be better positioned to
exploit it.&lt;/p&gt;
&lt;p&gt;Once your gamble worked and you get catapulted, all the other players will try
to latch onto you, surf the same wave as you, or simply shoot you down to give
themselves another chance. This is a delicate moment when you have to
ruthlessly attack anyone who comes close to you or tries to overtake you. Exponential growth will exaggerate any initial differences fast, so all you have to do is to make sure you are leading for a short time, and afterwards you will be pretty much outside the reach of the other players. You have won the game.&lt;/p&gt;
&lt;p&gt;The game could end at this point, but usually it doesn’t. The exponential
growth means that the differences between players grow, and it’s pretty much
impossible to change their order anymore. The growing powers will now compete
for resources, until all are consumed, and then they will start eating each
other, with the stronger taking over the weaker. In theory it’s still possible
for two weaker powers to combine and overcome a stronger power, but in practice
the stronger power can prevent that from happening by defeating one of the
weaker ones before they merge. The game turns into a boring grind, desperate
struggle to survive as long as possible and push away the inevitable.&lt;/p&gt;
&lt;p&gt;If there is no time limit, the game will always end with one player controlling
all the resources, standing on the burned husk of the world, with nothing more
left to conquer.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="politics"&gt;
&lt;h2&gt;Politics&lt;/h2&gt;
&lt;p&gt;If this looks to you like a criticism of capitalism, it’s probably because
there are similar mechanisms at play. Bringing it all down to money (or
capital, or power, or whatever single resource) does this. I’m not an economist
or a politician, so I’m not going to dwell on this too much. I’m sure you can
find such discussions easily elsewhere. I’m going to get back to game design.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="breaking-the-loop"&gt;
&lt;h2&gt;Breaking the Loop&lt;/h2&gt;
&lt;p&gt;You see that this kind of positive feedback loop, where getting more powerful
lets you easier become even more powerful is harmful to enjoyment of games. So
what can be done to fix this?&lt;/p&gt;
&lt;p&gt;The most obvious thing you can do is to separate the “victory points” that you
gain for completing elements of the game from the other in-game resources. Make
it “fame” or “status” or distance travelled or whatever else that has no direct
impact on the ease of playing. Don’t worry, humans have an intrinsic desire to
make numbers go up, and they will care about that number even if it doesn’t do
anything. In multi-player games you can say that whoever has the most of those
points after a certain time, or whoever reaches a certain number first, wins.
This works very well in games like Splendor, for example.&lt;/p&gt;
&lt;p&gt;But you can do even better. Make the victory points a burden. Make the game
&lt;em&gt;harder&lt;/em&gt; for the players that have more victory points. There are several
interesting ways to do this.&lt;/p&gt;
&lt;p&gt;In a card game Dominion, you build your deck as the game progresses. Victory
points are scored by buying cards that have victory points on them – but
usually those cards don’t do anything else, they just take up space in your
deck, and remove the opportunity to play cards that actually bring you
advantages. If you start by buying victory cards from the beginning, you will
soon have a deck that is almost entirely victory cards and you won’t be able to
do anything, soon your treasure cards will become so rare in the mass of
victory cards, that you won’t even be able to buy the cheapest victory cards.
So instead you have to balance your game carefully between buying the treasures
that let you buy better cards, the actions that let you interact with your deck
and other players to play better cards, and the actual victory cards. And that
balance depends very much on what the other players are doing. This makes the
game massively more interesting, and lets all players to play at their own
pace according to their own strategy.&lt;/p&gt;
&lt;p&gt;Another interesting trick is to leave the power inflation in there, but subtly
use it to make the game more complex as it progresses. You can see that for
example in the computer game Doom. The weakest weapon in the game needs no
ammunition and no aiming – you just come up to the monster and punch it. But
as the monsters become more powerful you have to use more powerful weapons, at
the cost of complexity. The second least powerful weapon, pistol, requires
ammunition and works at a distance, so you can’t just hold down the fire button
and run around, you have to conserve your resources and aim. The next weapon, a
shotgun, adds a long delay after each shot, so careful aiming becomes even more
important. This pattern continues, with every weapon adding some kind of a
special challenge – whether it’s especially rare ammunition, rocket explosions
that can hurt you, a spin-up delay before the chain gun starts shooting, or
long delays before and after each shot. As a result, power inflation prevents
the game from becoming easier, and the growing complexity of the stronger
weapons makes the game more interesting as it progresses.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="fungibility"&gt;
&lt;h2&gt;Fungibility&lt;/h2&gt;
&lt;p&gt;We say that something is “fungible”, when it can be easily exchanged into other
resources. A lot of things are fungible in the modern world, because gives us
more options and frees us from having to plan too much – there are people who
live owning just a few things (and a big bank account), because they can always
buy whatever they need, and discard it afterwards. But this also means it’s
much easier to fall into a power loop.&lt;/p&gt;
&lt;p&gt;Social status used to be divorced from money or capital. People scoffed at the
“nouveau riche” – people who have become rich recently, but don’t really have
high social status. Master artists and craftsmen used to be rather poor and
often relied on patronage.&lt;/p&gt;
&lt;p&gt;Today things have changed. A rich person can become a famous innovator by just
buying a car factory or a space rocket business. Status is decided by the lists
of the richest people published by magazines. And money also give you access to
the politicians, so you can make sure the rules won’t change. Fungibility has
created a positive feedback loop of power.&lt;/p&gt;
&lt;p&gt;Can it be avoided? Of course. You just need “victory points” separated from the
money. Have goals that can’t be bought: being a good member of your community,
having friends, learning skills, performing an art, protecting something
irreplaceable, creating something unique. Separate different parts of life, so
that being successful in one doesn’t automatically make all the others easier.
And most importantly, noblesse oblige – make the game harder for those with
more victory points – expect more of them in exchange for the power they
wield.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It’s worth to pay attention to what progress mechanics you have in your game
and how they affect the feel of the game and the incentive of the players.
Many techniques and tricks can be adapted, both from other games, and from
the wider world of economics, politics and social sciences in general.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://dopieralski.pl/posts/2020-06-21-snowball/" rel="alternate"/>
    <summary>Progress is an important mechanic in computer games. Not only it gives us a
reason to play the game, but it also serves as a way of communicating how
well we are playing. It can also serve several other purposes.</summary>
    <published>2020-06-21T00:00:00+02:00</published>
  </entry>
  <entry>
    <id>http://dopieralski.pl/posts/2021-01-09-circuitpython/</id>
    <title>CircuitPython in 2021</title>
    <updated>2021-01-09T00:00:00+01:00</updated>
    <content type="html">&lt;section id="circuitpython-in-2021"&gt;

&lt;p&gt;It is once again time for &lt;a class="reference external" href="https://blog.adafruit.com/2021/01/01/where-should-circuitpython-go-in-2021-circuitpython2021-circuitpython/"&gt;Adafruit’s prompt for
feedback on CircuitPython&lt;/a&gt;. Let’s see what I did
last year and what I hope for this year.&lt;/p&gt;
&lt;section id="the-projects"&gt;
&lt;h2&gt;The Projects&lt;/h2&gt;
&lt;p&gt;This year was slow project-wise. I did some work on a new, cheaper version of
my walking robots, but they still need a lot of programming work. Then I went
into the rabbit hole of low-profile mechanical keyboards, built half a dozen of
them, until I made a perfect one for me. In the process I also made a library
for keyboards that has substantially lower resource requirements than existing
ones.&lt;/p&gt;
&lt;p&gt;I also ported the Stage game library to a few new platforms, re-made the menu
program for it, and merged a couple of improvements from other contributors.&lt;/p&gt;
&lt;p&gt;Right now I’m working on a 6-hole MIDI ocarina, and I’m considering doing a
business-card sized flat version of PewPew Standalone, with bi-color LEDs.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-future"&gt;
&lt;h2&gt;The Future&lt;/h2&gt;
&lt;p&gt;After most of my plans went awry in 2020, I’m careful about planning anything
this year. I think I will just be making small projects to keep myself sane,
and see how the situation develops.&lt;/p&gt;
&lt;p&gt;In terms of development of CircuitPython, I’m really looking forward to the
dynamic USB descriptors, because that will let me make my keyboards more usable
for the general public, and then it will make sense to actually publish them
properly.&lt;/p&gt;
&lt;p&gt;It’s also nice to see the work around deep sleep, as this might let me save on
some parts in the future, moving the power switch to software.&lt;/p&gt;
&lt;p&gt;The work around reset, safe mode and what file should be run after reset will
allow me optimize the menu program for PewPews a little better, giving more
memory to the games.&lt;/p&gt;
&lt;p&gt;From what I can see most work is still focused on ESP32-S2, but I don’t find
this particularly interesting for myself. I’m not a great fan of wireless
solutions in general, and WiFi in particular seems a bit heavy for
microcontroller-based projects. The need for certification also limits greatly
what kind of projects I could make with this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It’s great to see the CircuitPython project progressing and getting more
popular, and I am very grateful to all contributors for it. Having said that,
I think it is slowly reaching a point where it has most of what is needed, so
it’s difficult to be excited about new developments — they are no longer such
big steps forward. Of course in the long run it is a good thing — we can focus
more on things we are building with the tool, not on the tool itself.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://dopieralski.pl/posts/2021-01-09-circuitpython/" rel="alternate"/>
    <summary>It is once again time for Adafruit’s prompt for
feedback on CircuitPython. Let’s see what I did
last year and what I hope for this year.</summary>
    <published>2021-01-09T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://dopieralski.pl/posts/2021-12-19-small-robots/</id>
    <title>Build Small Robots</title>
    <updated>2021-12-19T00:00:00+01:00</updated>
    <content type="html">&lt;section id="build-small-robots"&gt;

&lt;p&gt;In which we learn why it’s much easier to build small robots than large ones.&lt;/p&gt;
&lt;section id="the-cube-law"&gt;
&lt;h2&gt;The Cube Law&lt;/h2&gt;
&lt;p&gt;A lot of reasons for making your robots small comes from the cube law. This law
gives you the relation between the size of an object and its volume (there is
also the square law, that gives you the relation between the size and the
area). It says that as your robot grows in size, its volume will grow
proportionally to the third power of that size (also called cube, hence the
law’s name). Consider the following two example robots:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Dimensions 5×5×5cm, volume 125cm³, weight 125g&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dimensions 10×10×10cm, volume 1000cm³, weight 1000g&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(I’m assuming that in both cases the average density of the robot doesn’t
change, that is, that it’s not almost empty in the second case. As we will see
later, that’s quite accurate, or even optimistic.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="actuator-strength"&gt;
&lt;h2&gt;Actuator Strength&lt;/h2&gt;
&lt;p&gt;“Actuator” is a fancy name for whatever makes your robot move: servo, motor,
artificial muscle, memory metal, hydraulics, pneumatics, etc. As the size and
weight of your robot grows, so has to the strength of the actuators it uses.&lt;/p&gt;
&lt;p&gt;For instance, consider a servo. Its strength (in this case called torque) is
usually expressed in kilograms (of force) times centimeters, or newton meters.
If a servo has 1kg×cm of torque, it means it can lift 1kg of weight on a 1cm
long lever. Since the levers scale linearly, it means it could also lift 0.5kg
on 2cm long lever, or 2kg on 0.5cm long lever, etc. You can see already that if
you make the robot’s legs twice as long, you will need twice as much torque.
But that’s assuming that the weight remains the same. From the cube law you
know, that the weight is going to grow fast, so in reality larger robots will
need a lot more torque.&lt;/p&gt;
&lt;p&gt;But there is another thing. The smaller the servos, the lighter and cheaper
they are. Sure, the torque also gets smaller, but not nearly as fast. Consider
those two example servos:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;HK-282A Ultra-Micro Servo: weight 2.2g, torque 0.11kg*cm, price 3 EUR&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S3027 Metal Gear Servo: weight 20g, torque 2.5kg*cm, price 20 EUR&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, the smaller servo can raise itself on a lever half a meter
long! The larger one, almost 10 times heavier and over 20 times stronger, can
only do 125cm. And it will be similar with any other parameter: price, speed,
amount of current needed, etc. At some point the parameters will be so bad,
that you will have to switch to hydraulics.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="material-strength"&gt;
&lt;h2&gt;Material Strength&lt;/h2&gt;
&lt;p&gt;It’s not just the actuators that need to be stronger. They are connected to the
structural elements, that have to bear all that force too. And thanks to the
cube law, it doesn’t suffice for them to be just longer and thicker – they
actually have to be made from stronger and lighter materials.&lt;/p&gt;
&lt;p&gt;Stronger materials are harder to machine and generally work with. You can no
longer get away with hot-gluing parts together: you will need nuts and bolts,
and possibly also special mechanical design. And you will need specialized
tools.&lt;/p&gt;
&lt;p&gt;And when you finally get your robot together, it will be very fragile. Why do
you think all those large robots in laboratories always operate with a safety
line hanging from the ceiling over them? That’s because if they fall down, they
will smash into pieces. The materials they use are strong enough to hold them
together, but not strong enough to survive a fall.&lt;/p&gt;
&lt;p&gt;On the other hand, my smallest robots survived repeated falls from my desk to
the floor without even a scratch. If you make a robot the size of a cockroach,
you can drop it from the roof of a building. It will simply not gain enough
speed falling through the air to damage it on impacting the floor.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="inertia"&gt;
&lt;h2&gt;Inertia&lt;/h2&gt;
&lt;p&gt;So you finished your large robot, and now you are programming it. For a start,
you just make the limbs move straight to their destinations and stopping once
they get there. Your robot falls, the limbs break off, the servos strip gears
and there are huge spikes of current drawn from the battery. What happens?&lt;/p&gt;
&lt;p&gt;Well, you cannot just move a heavy object with high speed and then have it stop
instantly. Inertia will make it keep on moving, and the servomechanisms will
need to do a lot of extra work (and endure great forces of stress) to stop it
and move it back where it belongs. That also applies when moving the whole body
of the robot while walking – your effective Zero Movement Point no longer
coincides with the center of mass of your robot. You have to start taking the
speed and acceleration into consideration in your motion planning, and thus all
your movement equations become second degree differential equations without a
closed-form solution. Yay!&lt;/p&gt;
&lt;p&gt;On the other hand, if you keep the robot small, all its elements light and the
servos have abundance of power, you can pretty much ignore inertia and get away
with writing much simpler code that only takes into account the current
positions of the limbs.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="safety"&gt;
&lt;h2&gt;Safety&lt;/h2&gt;
&lt;p&gt;So you think you have the budget, you have the materials and tools, you have
the programming expertise and strong servos to handle the inertia, what could
possibly happen.&lt;/p&gt;
&lt;p&gt;Strong servos, larger batteries, high currents, long reach of the limbs, high
movement speeds – it all means trouble. You will need safety measures. Force
stop buttons, one on the robot itself (hardware, brutally cutting the power),
and one remote (so that you don’t have to chase your robot through a hole in
made in the wall). Suspensions mechanisms. Safety gear for you to wear. Fire
extinguisher capable of containing a LiPo battery fire. Circuit breakers.
Someone to check periodically if you are trapped under your robot’s weight…&lt;/p&gt;
&lt;p&gt;It’s all extra work, extra cost and extra risk. Why take it, if you can instead
have a robot the size of a hamster that behaves funny when something goes
wrong, and tickles instead of crushing your bones?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="convenience"&gt;
&lt;h2&gt;Convenience&lt;/h2&gt;
&lt;p&gt;I left the most important reason for the end. Small robots are convenient.&lt;/p&gt;
&lt;p&gt;You can work with them directly on your desktop, connect them to your computer,
adjust easily with just a screwdriver. You can store them in your drawer. You
can recharge them from your phone charger. You can take them with you to
conferences and workshops. You can fly with them in your carry-on baggage (as
long as they don’t have anything that looks like a clock on them). When
something goes wrong or breaks, you can simply pick them up and fix.&lt;/p&gt;
&lt;p&gt;Not so easy with larger robots. You will need to test them on the floor, in a
garage or even outside. You will need a complete suite of tools to work on
them, and a dedicated storage space to keep them. Special battery charger.
Taking them anywhere involves careful packaging or even loading onto a car. For
flight, you have to remove anything that is sensitive to low temperature and
pressure, as it’s going to go in the check-in baggage. Also be prepared to have
to re-fasten all the screws on it that came loose due to vibrations. When
something goes wrong or breaks, you have to call the mason to fix your house…&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Make your robots as small, as practically possible.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://dopieralski.pl/posts/2021-12-19-small-robots/" rel="alternate"/>
    <summary>In which we learn why it’s much easier to build small robots than large ones.</summary>
    <published>2021-12-19T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://dopieralski.pl/posts/2022-01-22-circuitpython/</id>
    <title>CircuitPython in 2022</title>
    <updated>2022-01-22T00:00:00+01:00</updated>
    <content type="html">&lt;section id="circuitpython-in-2022"&gt;

&lt;p&gt;As every year, it’s time for a yearly summary and plans of all things I do
that are related to CircuitPython.&lt;/p&gt;
&lt;section id="the-projects"&gt;
&lt;h2&gt;The Projects&lt;/h2&gt;
&lt;p&gt;This year I made a record number of keyboards, and also greatly improved my
keyboard library, uKeeb. Some features were added, because CircuitPython now
supports them: CapsLock LED, disabled disk and console, NKRO and BOOT modes,
keypad module. Others I added as new keyboards needed them: proper hold/tap
with rollover timeout, layer switching improvements, mouse support, LED
animations.&lt;/p&gt;
&lt;p&gt;My FluffBug robot is now at hardware version 5, but software-wise there was
no progress. I got the per-leg inverse kinematics done, and I should write
the walking code, but I can’t find the motivation.&lt;/p&gt;
&lt;p&gt;The MIDI Ocarina is now at version 3. I gave up on the barometric pressure
sensor for detecting blowing, as its recovery time was poor, and instead
switched to a PDM microphone using audiobusio. This works great. I still need
to write the MIDI code for it.&lt;/p&gt;
&lt;p&gt;I tried the new camera code, but I couldn’t get it to work with the camera
breakouts that I have. Either I’m using wrong pins, or something broke in the
IDF version I used. I have no energy to investigate this further.&lt;/p&gt;
&lt;p&gt;I also gave up on making the uGame console work with newer versions of
CircuitPython – the changes in interrupt handling and time module related to
adding sleep made the SAMD21 port work so erratically, that I simply gave up.
I did fix the PewPew code by avoiding using the time module altogether.&lt;/p&gt;
&lt;p&gt;There is also a but in the PWM code on SAMD that makes it hang completely
in a loop waiting for a register flag that never gets set. I got that far
debugging it, but why it never gets set is a mystery to me, and nobody
seems to be interested in fixing it. I worked around it in Stage library
by simply setting the backlight pin high, not using PWM at all, but I got
bitten by the same bug recently in the ocarina code.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-future"&gt;
&lt;h2&gt;The Future&lt;/h2&gt;
&lt;p&gt;This year I want to finish FluffBug at least to the point where it walks and
uses the leg sensors and the distance sensors. I wish I could get the camera
to work with it as well. I might also try a gesture sensor, and an
accelerometer.&lt;/p&gt;
&lt;p&gt;I received a nice ESP32-S2 development board with a display from MakerFabs,
and I want to get the display working with displayio. Unfortunately it’s a
16-bit parallel, with non-consecutive data pins, so I would need to work
on the relevant module first. No idea how much work it would require.&lt;/p&gt;
&lt;p&gt;There is a cool watch project using a SAML22 microcontroller, which should
be very similar to SAMD21. The author mentioned that he wants to get a port
of CircuitPython working on it. I’m very interested in this, because that
chip also has an LCD-driving circuitry, which would allow me to make even
cheaper version of the PewPew console, with a custom LCD screen.&lt;/p&gt;
&lt;p&gt;I might be making another handheld game console, with a 3.2”
screen and ESP32-S2 as the brains, but I’m not entirely sure yet. I’m doing
research on how viable it would be, and collecting parts.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This year brought some cool developments around USB and keyboards, but also
a lot of frustration with keeping my existing projects working despite new
bugs. The SAMD family seems to now get very little attention, and it suffered
greatly with the addition of sleep support. Not being able to find and fix
those bugs is very frustrating, and drains energy I could use on projects
instead. The new boards are ridiculously powerful, but considerably more
complex to use in projects, unless using a ready development board. I think
I will focus on the Lolin S2 Mini boards for my projects this year, however,
while I mentioned some things I hope to work on, I am aware that I have
very little energy left for this. Hopefully my health and the overall global
situation will improve.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://dopieralski.pl/posts/2022-01-22-circuitpython/" rel="alternate"/>
    <summary>As every year, it’s time for a yearly summary and plans of all things I do
that are related to CircuitPython.</summary>
    <published>2022-01-22T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://dopieralski.pl/posts/2023-02-10-typesetting/</id>
    <title>Design for Exploration</title>
    <updated>2023-02-10T00:00:00+01:00</updated>
    <content type="html">&lt;section id="design-for-exploration"&gt;

&lt;section id="typesetting-software"&gt;
&lt;h2&gt;Typesetting Software&lt;/h2&gt;
&lt;p&gt;Imagine a text processor, similar to Wordstar, but more closely modelled around
the tried and tested workflows of professional typesetters.&lt;/p&gt;
&lt;p&gt;You begin by composing the text of your copy. But to avoid mistakes and to make
use of the saved work you did before, you don’t simply type the words. You
select them from a set of dictionaries that were created by other users,
organized according to whatever needs those users had. Of course if you need
any word that is not already in the dictionary, you can always create your own
custom dictionary and add any words you need to it.&lt;/p&gt;
&lt;p&gt;Once you have all your words, you connect them into sentences. Each sentence gets assigned a name, so that you can refer to it later on easily.&lt;/p&gt;
&lt;p&gt;Then you have to select the fonts for your words. Most words will already have their fonts assigned by default in the dictionary, but you might want to make a word bold or italic, or select alternate forms for some letters, maybe a long S or some ligature, or change the kerning subtly to make it look better.&lt;/p&gt;
&lt;p&gt;Finally, you get to place all those words. You will have them dumped on the page, and you can move them around and arrange them carefully. The sentence names you set earlier are used to show you the “ratlines” connecting the words, to help you get them in the right order. You might even use an “autotypesetter” to arrange the words automatically, but usually you will need to do some manual adjustments.&lt;/p&gt;
&lt;p&gt;Once you have all that, you can simply hit “print” to have a beautiful page of text printed.&lt;/p&gt;
&lt;p&gt;If the above described user interface seems to you to be unnecessarily clunky
and complicated for such a “simple” task as writing a page of text to be
printed, remember that the process is only seems to be simple when you don’t
care about all those details. The user interface is fake, of course, but it’s
an example of something you might come up with if you researched carefully how
the printing press staff is going about the task, and tried to re-create that
process in the computer.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="kicad"&gt;
&lt;h2&gt;KiCAD&lt;/h2&gt;
&lt;p&gt;That is, incidentally, exactly what the authors of PCB design software KiCAD
did, and the end result is equally baroque:&lt;/p&gt;
&lt;p&gt;You have to start by drawing a schematic for the circuit you plan to design. Just like with the words, you don’t simply draw the symbols that you need, but instead you select them from a vast library of electronic symbols, divided into several “libraries” by random criteria. If you need a symbol that doesn’t exist in any of those libraries, you have to draw it, place it in a new library, and then you can select it from there.&lt;/p&gt;
&lt;p&gt;Once you have all your symbols placed, you connect them with wires. And again,
all wires that are connected together form a net, and get assigned a unique net
name. You will need those names later. Even if two nets are not visually
connected, but share the same net, they are considered connected, because who
cares how hard that is to read. Our program only cares about the nets.&lt;/p&gt;
&lt;p&gt;Once you have your schematic drawn, you have to select a footprint for each of the symbols. A footprint is the arrangement of holes and pads on the PCB where the physical part will be placed. And of course many symbols will already have a default footprint, but some will have several possibilities, and if it’s a new part, you will have to make a custom one yourself. So you still have to got through this step manually.&lt;/p&gt;
&lt;p&gt;And finally, you get to see the actual layout of your PCB, with all the
footprints dumped into a pile, and you can start arranging them, and connecting
them with traces. There are tools like the autorouter that can help you with
the connections sometimes, but they mostly come up with solutions that are
worse than what you could do by hand.&lt;/p&gt;
&lt;p&gt;Once you have it all placed and connected, you can generate the gerber files and send them to your favorite PCB factory to be manufactured.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="can-we-do-better"&gt;
&lt;h2&gt;Can we do better?&lt;/h2&gt;
&lt;p&gt;I sure hope so! I mean, modern text processors don’t work like described here,
and while you often don’t have such precise control on the output, they seem to
be much easier to use. How do they do that?&lt;/p&gt;
&lt;p&gt;Well, first of all, they have given up on the division between the manuscript
and the printed page. They show you the preview of the printed page right away
– or at least some approximation of it, with some extra information like
margins paragraph markers included. This merging of the two views, makes it
much more intuitive, and obviates the need to go back and forth between them to
make changes and then to see the effects of those changes and so on.&lt;/p&gt;
&lt;p&gt;You also don’t need to search the dictionaries. You just type the word you
need, and if it’s not found in any dictionary, it will be marked by
spellchecker as suspicious, but you are still allowed to have it on your page.
And if you know you are going to use that new word more, adding it to the
custom dictionary is just a question of a single command.&lt;/p&gt;
&lt;p&gt;And you don’t have to assign a font and style to every word separately. You use
the defaults most of the time, and then you can select parts of the text and
change those defaults in bulk as needed. If you really want to, you can even
change ligatures and alternate letter forms, though that is usually automated
well enough that most people never need to touch it.&lt;/p&gt;
&lt;p&gt;Of course you are still limited to the fonts installed on your system, and if
you need a custom glyph that is not included in any font, you will need to
either make a new font (which is very complicated) or cheat by including it as
an image or doing some similar trick. Font selection dialogs came a long way in
modern word processors, but they still suck a lot. There is a lot that could be
done to improve on them, starting with proper tagging and categorizing of the
fonts themselves. Perhaps at some point we will be able to just describe what
we want, instead of having to look for it in a long list? And maybe one day we
will find a better way of sorting fonts than by name.&lt;/p&gt;
&lt;p&gt;But still, I think the text editing came a long way compared to some other
computer assisted tasks, like PCB design.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://dopieralski.pl/posts/2023-02-10-typesetting/" rel="alternate"/>
    <summary>Imagine a text processor, similar to Wordstar, but more closely modelled around
the tried and tested workflows of professional typesetters.</summary>
    <published>2023-02-10T00:00:00+01:00</published>
  </entry>
</feed>
