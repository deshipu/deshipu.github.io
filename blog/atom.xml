<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">dopieralski.pl</title>
  <id>http://dopieralski.pl/blog/atom.xml</id>
  <updated>2021-12-19T00:00:00Z</updated>
  <link href="http://dopieralski.pl/" />
  <link href="http://dopieralski.pl/blog/atom.xml" rel="self" />
  <generator uri="http://ablog.readthedocs.org" version="0.9.5">ABlog</generator>
  <entry xml:base="http://dopieralski.pl/blog/atom.xml">
    <title type="text">Build Small Robots</title>
    <id>http://dopieralski.pl/posts/2021-12-19-small-robots/</id>
    <updated>2021-12-19T00:00:00Z</updated>
    <published>2021-12-19T00:00:00Z</published>
    <link href="http://dopieralski.pl/posts/2021-12-19-small-robots/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;build-small-robots&quot;&gt;

&lt;p&gt;In which we learn why it’s much easier to build small robots than large ones.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-cube-law&quot;&gt;
&lt;h2&gt;The Cube Law&lt;/h2&gt;
&lt;p&gt;A lot of reasons for making your robots small comes from the cube law. This law
gives you the relation between the size of an object and its volume (there is
also the square law, that gives you the relation between the size and the
area). It says that as your robot grows in size, its volume will grow
proportionally to the third power of that size (also called cube, hence the
law’s name). Consider the following two example robots:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;Dimensions 5×5×5cm, volume 125cm³, weight 125g&lt;/li&gt;
&lt;li&gt;Dimensions 10×10×10cm, volume 1000cm³, weight 1000g&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(I’m assuming that in both cases the average density of the robot doesn’t
change, that is, that it’s not almost empty in the second case. As we will see
later, that’s quite accurate, or even optimistic.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;actuator-strength&quot;&gt;
&lt;h2&gt;Actuator Strength&lt;/h2&gt;
&lt;p&gt;“Actuator” is a fancy name for whatever makes your robot move: servo, motor,
artificial muscle, memory metal, hydraulics, pneumatics, etc. As the size and
weight of your robot grows, so has to the strength of the actuators it uses.&lt;/p&gt;
&lt;p&gt;For instance, consider a servo. Its strength (in this case called torque) is
usually expressed in kilograms (of force) times centimeters, or newton meters.
If a servo has 1kg×cm of torque, it means it can lift 1kg of weight on a 1cm
long lever. Since the levers scale linearly, it means it could also lift 0.5kg
on 2cm long lever, or 2kg on 0.5cm long lever, etc. You can see already that if
you make the robot’s legs twice as long, you will need twice as much torque.
But that’s assuming that the weight remains the same. From the cube law you
know, that the weight is going to grow fast, so in reality larger robots will
need a lot more torque.&lt;/p&gt;
&lt;p&gt;But there is another thing. The smaller the servos, the lighter and cheaper
they are. Sure, the torque also gets smaller, but not nearly as fast. Consider
those two example servos:&lt;/p&gt;
&lt;ul class=&quot;simple&quot;&gt;
&lt;li&gt;HK-282A Ultra-Micro Servo: weight 2.2g, torque 0.11kg*cm, price 3 EUR&lt;/li&gt;
&lt;li&gt;S3027 Metal Gear Servo: weight 20g, torque 2.5kg*cm, price 20 EUR&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, the smaller servo can raise itself on a lever half a meter
long! The larger one, almost 10 times heavier and over 20 times stronger, can
only do 125cm. And it will be similar with any other parameter: price, speed,
amount of current needed, etc. At some point the parameters will be so bad,
that you will have to switch to hydraulics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;material-strength&quot;&gt;
&lt;h2&gt;Material Strength&lt;/h2&gt;
&lt;p&gt;It’s not just the actuators that need to be stronger. They are connected to the
structural elements, that have to bear all that force too. And thanks to the
cube law, it doesn’t suffice for them to be just longer and thicker – they
actually have to be made from stronger and lighter materials.&lt;/p&gt;
&lt;p&gt;Stronger materials are harder to machine and generally work with. You can no
longer get away with hot-gluing parts together: you will need nuts and bolts,
and possibly also special mechanical design. And you will need specialized
tools.&lt;/p&gt;
&lt;p&gt;And when you finally get your robot together, it will be very fragile. Why do
you think all those large robots in laboratories always operate with a safety
line hanging from the ceiling over them? That’s because if they fall down, they
will smash into pieces. The materials they use are strong enough to hold them
together, but not strong enough to survive a fall.&lt;/p&gt;
&lt;p&gt;On the other hand, my smallest robots survived repeated falls from my desk to
the floor without even a scratch. If you make a robot the size of a cockroach,
you can drop it from the roof of a building. It will simply not gain enough
speed falling through the air to damage it on impacting the floor.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;inertia&quot;&gt;
&lt;h2&gt;Inertia&lt;/h2&gt;
&lt;p&gt;So you finished your large robot, and now you are programming it. For a start,
you just make the limbs move straight to their destinations and stopping once
they get there. Your robot falls, the limbs break off, the servos strip gears
and there are huge spikes of current drawn from the battery. What happens?&lt;/p&gt;
&lt;p&gt;Well, you cannot just move a heavy object with high speed and then have it stop
instantly. Inertia will make it keep on moving, and the servomechanisms will
need to do a lot of extra work (and endure great forces of stress) to stop it
and move it back where it belongs. That also applies when moving the whole body
of the robot while walking – your effective Zero Movement Point no longer
coincides with the center of mass of your robot. You have to start taking the
speed and acceleration into consideration in your motion planning, and thus all
your movement equations become second degree differential equations without a
closed-form solution. Yay!&lt;/p&gt;
&lt;p&gt;On the other hand, if you keep the robot small, all its elements light and the
servos have abundance of power, you can pretty much ignore inertia and get away
with writing much simpler code that only takes into account the current
positions of the limbs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;safety&quot;&gt;
&lt;h2&gt;Safety&lt;/h2&gt;
&lt;p&gt;So you think you have the budget, you have the materials and tools, you have
the programming expertise and strong servos to handle the inertia, what could
possibly happen.&lt;/p&gt;
&lt;p&gt;Strong servos, larger batteries, high currents, long reach of the limbs, high
movement speeds – it all means trouble. You will need safety measures. Force
stop buttons, one on the robot itself (hardware, brutally cutting the power),
and one remote (so that you don’t have to chase your robot through a hole in
made in the wall). Suspensions mechanisms. Safety gear for you to wear. Fire
extinguisher capable of containing a LiPo battery fire. Circuit breakers.
Someone to check periodically if you are trapped under your robot’s weight…&lt;/p&gt;
&lt;p&gt;It’s all extra work, extra cost and extra risk. Why take it, if you can instead
have a robot the size of a hamster that behaves funny when something goes
wrong, and tickles instead of crushing your bones?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;convenience&quot;&gt;
&lt;h2&gt;Convenience&lt;/h2&gt;
&lt;p&gt;I left the most important reason for the end. Small robots are convenient.&lt;/p&gt;
&lt;p&gt;You can work with them directly on your desktop, connect them to your computer,
adjust easily with just a screwdriver. You can store them in your drawer. You
can recharge them from your phone charger. You can take them with you to
conferences and workshops. You can fly with them in your carry-on baggage (as
long as they don’t have anything that looks like a clock on them). When
something goes wrong or breaks, you can simply pick them up and fix.&lt;/p&gt;
&lt;p&gt;Not so easy with larger robots. You will need to test them on the floor, in a
garage or even outside. You will need a complete suite of tools to work on
them, and a dedicated storage space to keep them. Special battery charger.
Taking them anywhere involves careful packaging or even loading onto a car. For
flight, you have to remove anything that is sensitive to low temperature and
pressure, as it’s going to go in the check-in baggage. Also be prepared to have
to re-fasten all the screws on it that came loose due to vibrations. When
something goes wrong or breaks, you have to call the mason to fix your house…&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Make your robots as small, as practically possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://dopieralski.pl/blog/atom.xml">
    <title type="text">CircuitPython in 2021</title>
    <id>http://dopieralski.pl/posts/2021-01-09-circuitpython/</id>
    <updated>2021-01-09T00:00:00Z</updated>
    <published>2021-01-09T00:00:00Z</published>
    <link href="http://dopieralski.pl/posts/2021-01-09-circuitpython/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;circuitpython-in-2021&quot;&gt;

&lt;p&gt;It is once again time for &lt;a class=&quot;reference external&quot; href=&quot;https://blog.adafruit.com/2021/01/01/where-should-circuitpython-go-in-2021-circuitpython2021-circuitpython/&quot;&gt;Adafruit’s prompt for
feedback on CircuitPython&lt;/a&gt;. Let’s see what I did
last year and what I hope for this year.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-projects&quot;&gt;
&lt;h2&gt;The Projects&lt;/h2&gt;
&lt;p&gt;This year was slow project-wise. I did some work on a new, cheaper version of
my walking robots, but they still need a lot of programming work. Then I went
into the rabbit hole of low-profile mechanical keyboards, built half a dozen of
them, until I made a perfect one for me. In the process I also made a library
for keyboards that has substantially lower resource requirements than existing
ones.&lt;/p&gt;
&lt;p&gt;I also ported the Stage game library to a few new platforms, re-made the menu
program for it, and merged a couple of improvements from other contributors.&lt;/p&gt;
&lt;p&gt;Right now I’m working on a 6-hole MIDI ocarina, and I’m considering doing a
business-card sized flat version of PewPew Standalone, with bi-color LEDs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;the-future&quot;&gt;
&lt;h2&gt;The Future&lt;/h2&gt;
&lt;p&gt;After most of my plans went awry in 2020, I’m careful about planning anything
this year. I think I will just be making small projects to keep myself sane,
and see how the situation develops.&lt;/p&gt;
&lt;p&gt;In terms of development of CircuitPython, I’m really looking forward to the
dynamic USB descriptors, because that will let me make my keyboards more usable
for the general public, and then it will make sense to actually publish them
properly.&lt;/p&gt;
&lt;p&gt;It’s also nice to see the work around deep sleep, as this might let me save on
some parts in the future, moving the power switch to software.&lt;/p&gt;
&lt;p&gt;The work around reset, safe mode and what file should be run after reset will
allow me optimize the menu program for PewPews a little better, giving more
memory to the games.&lt;/p&gt;
&lt;p&gt;From what I can see most work is still focused on ESP32-S2, but I don’t find
this particularly interesting for myself. I’m not a great fan of wireless
solutions in general, and WiFi in particular seems a bit heavy for
microcontroller-based projects. The need for certification also limits greatly
what kind of projects I could make with this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It’s great to see the CircuitPython project progressing and getting more
popular, and I am very grateful to all contributors for it. Having said that,
I think it is slowly reaching a point where it has most of what is needed, so
it’s difficult to be excited about new developments — they are no longer such
big steps forward. Of course in the long run it is a good thing — we can focus
more on things we are building with the tool, not on the tool itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://dopieralski.pl/blog/atom.xml">
    <title type="text">Progress Mechanics</title>
    <id>http://dopieralski.pl/posts/2020-06-21-snowball/</id>
    <updated>2020-06-21T00:00:00Z</updated>
    <published>2020-06-21T00:00:00Z</published>
    <link href="http://dopieralski.pl/posts/2020-06-21-snowball/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;progress-mechanics&quot;&gt;

&lt;p&gt;Progress is an important mechanic in computer games. Not only it gives us a
reason to play the game, but it also serves as a way of communicating how
well we are playing. It can also serve several other purposes.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;reward-spiral&quot;&gt;
&lt;h2&gt;Reward Spiral&lt;/h2&gt;
&lt;p&gt;One of the most obvious ways of implementing progress is to simply reward the
player with experience points, better equipment, or other resources as they
complete fragments of the game. Defeating opponents, completing quests,
arriving in a new area, finding hidden treasures, etc. can all be used for this
purpose. However, there is a danger in this if the rewards are useful in terms
of the gameplay mechanics – they make the game easier.&lt;/p&gt;
&lt;p&gt;Making the game easier as the player progresses is bad in single-player games
because it often makes the game boring – the initial challenge, when finally
overcome, becomes a mindless grind to get more of the rewards, with little
actual skill required. To counter that, game designers will often try to offset
player progress with stronger monsters and harder levels – so that even though
the player character gets more powerful, so do the obstacles. This results in a
kind of a power inflation phenomenon. It requires careful balancing, because a
small random fluctuation can leave the player facing unrealistic challenges, or
catapult them into too easy a game, staying just ahead of the difficulty.&lt;/p&gt;
&lt;p&gt;While bad in single-player games, in competitive multi-player games this
mechanic is often devastating. Whichever player manages to get even a tiny
advantage, through skill or luck, gets catapulted ahead of the other players,
and leaves them in the dust with no hope of winning, except maybe for a
desperate gamble to get ahead in the initial stages. You can see that in action
particularly well in the board game Monopoly, which was actually designed to
demonstrate the problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;optimal-tactics&quot;&gt;
&lt;h2&gt;Optimal Tactics&lt;/h2&gt;
&lt;p&gt;When playing a game in which rewards make the game easier, there is no longer a
dilemma between sharpening your axe or cutting the tree. When you have to
choose between gaining more power or doing something useful, you always have to
choose more power. Anybody who diverts even a tiny bit of their gains into
something else than immediate growth will fall back on the growth curve behind
their opponents and lose the game. Power is the only thing worth fighting for.&lt;/p&gt;
&lt;p&gt;The game is won or lost in the initial stages. Your best tactic is to optimize
for short-time advantages, keeping yourself alive and as close to the point
where the exponential growth begins, in the hope that a random fluctuation will
boost you onto the path to victory. Sometimes you might even be able to see the
fluctuation coming, or even to arrange it to happen, but there is still an
element of randomness here, as some other player might be better positioned to
exploit it.&lt;/p&gt;
&lt;p&gt;Once your gamble worked and you get catapulted, all the other players will try
to latch onto you, surf the same wave as you, or simply shoot you down to give
themselves another chance. This is a delicate moment when you have to
ruthlessly attack anyone who comes close to you or tries to overtake you. Exponential growth will exaggerate any initial differences fast, so all you have to do is to make sure you are leading for a short time, and afterwards you will be pretty much outside the reach of the other players. You have won the game.&lt;/p&gt;
&lt;p&gt;The game could end at this point, but usually it doesn’t. The exponential
growth means that the differences between players grow, and it’s pretty much
impossible to change their order anymore. The growing powers will now compete
for resources, until all are consumed, and then they will start eating each
other, with the stronger taking over the weaker. In theory it’s still possible
for two weaker powers to combine and overcome a stronger power, but in practice
the stronger power can prevent that from happening by defeating one of the
weaker ones before they merge. The game turns into a boring grind, desperate
struggle to survive as long as possible and push away the inevitable.&lt;/p&gt;
&lt;p&gt;If there is no time limit, the game will always end with one player controlling
all the resources, standing on the burned husk of the world, with nothing more
left to conquer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;politics&quot;&gt;
&lt;h2&gt;Politics&lt;/h2&gt;
&lt;p&gt;If this looks to you like a criticism of capitalism, it’s probably because
there are similar mechanisms at play. Bringing it all down to money (or
capital, or power, or whatever single resource) does this. I’m not an economist
or a politician, so I’m not going to dwell on this too much. I’m sure you can
find such discussions easily elsewhere. I’m going to get back to game design.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;breaking-the-loop&quot;&gt;
&lt;h2&gt;Breaking the Loop&lt;/h2&gt;
&lt;p&gt;You see that this kind of positive feedback loop, where getting more powerful
lets you easier become even more powerful is harmful to enjoyment of games. So
what can be done to fix this?&lt;/p&gt;
&lt;p&gt;The most obvious thing you can do is to separate the “victory points” that you
gain for completing elements of the game from the other in-game resources. Make
it “fame” or “status” or distance travelled or whatever else that has no direct
impact on the ease of playing. Don’t worry, humans have an intrinsic desire to
make numbers go up, and they will care about that number even if it doesn’t do
anything. In multi-player games you can say that whoever has the most of those
points after a certain time, or whoever reaches a certain number first, wins.
This works very well in games like Splendor, for example.&lt;/p&gt;
&lt;p&gt;But you can do even better. Make the victory points a burden. Make the game
&lt;em&gt;harder&lt;/em&gt; for the players that have more victory points. There are several
interesting ways to do this.&lt;/p&gt;
&lt;p&gt;In a card game Dominion, you build your deck as the game progresses. Victory
points are scored by buying cards that have victory points on them – but
usually those cards don’t do anything else, they just take up space in your
deck, and remove the opportunity to play cards that actually bring you
advantages. If you start by buying victory cards from the beginning, you will
soon have a deck that is almost entirely victory cards and you won’t be able to
do anything, soon your treasure cards will become so rare in the mass of
victory cards, that you won’t even be able to buy the cheapest victory cards.
So instead you have to balance your game carefully between buying the treasures
that let you buy better cards, the actions that let you interact with your deck
and other players to play better cards, and the actual victory cards. And that
balance depends very much on what the other players are doing. This makes the
game massively more interesting, and lets all players to play at their own
pace according to their own strategy.&lt;/p&gt;
&lt;p&gt;Another interesting trick is to leave the power inflation in there, but subtly
use it to make the game more complex as it progresses. You can see that for
example in the computer game Doom. The weakest weapon in the game needs no
ammunition and no aiming – you just come up to the monster and punch it. But
as the monsters become more powerful you have to use more powerful weapons, at
the cost of complexity. The second least powerful weapon, pistol, requires
ammunition and works at a distance, so you can’t just hold down the fire button
and run around, you have to conserve your resources and aim. The next weapon, a
shotgun, adds a long delay after each shot, so careful aiming becomes even more
important. This pattern continues, with every weapon adding some kind of a
special challenge – whether it’s especially rare ammunition, rocket explosions
that can hurt you, a spin-up delay before the chain gun starts shooting, or
long delays before and after each shot. As a result, power inflation prevents
the game from becoming easier, and the growing complexity of the stronger
weapons makes the game more interesting as it progresses.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;fungibility&quot;&gt;
&lt;h2&gt;Fungibility&lt;/h2&gt;
&lt;p&gt;We say that something is “fungible”, when it can be easily exchanged into other
resources. A lot of things are fungible in the modern world, because gives us
more options and frees us from having to plan too much – there are people who
live owning just a few things (and a big bank account), because they can always
buy whatever they need, and discard it afterwards. But this also means it’s
much easier to fall into a power loop.&lt;/p&gt;
&lt;p&gt;Social status used to be divorced from money or capital. People scoffed at the
“nouveau riche” – people who have become rich recently, but don’t really have
high social status. Master artists and craftsmen used to be rather poor and
often relied on patronage.&lt;/p&gt;
&lt;p&gt;Today things have changed. A rich person can become a famous innovator by just
buying a car factory or a space rocket business. Status is decided by the lists
of the richest people published by magazines. And money also give you access to
the politicians, so you can make sure the rules won’t change. Fungibility has
created a positive feedback loop of power.&lt;/p&gt;
&lt;p&gt;Can it be avoided? Of course. You just need “victory points” separated from the
money. Have goals that can’t be bought: being a good member of your community,
having friends, learning skills, performing an art, protecting something
irreplaceable, creating something unique. Separate different parts of life, so
that being successful in one doesn’t automatically make all the others easier.
And most importantly, noblesse oblige – make the game harder for those with
more victory points – expect more of them in exchange for the power they
wield.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;conclusion&quot;&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It’s worth to pay attention to what progress mechanics you have in your game
and how they affect the feel of the game and the incentive of the players.
Many techniques and tricks can be adapted, both from other games, and from
the wider world of economics, politics and social sciences in general.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://dopieralski.pl/blog/atom.xml">
    <title type="text">CircuitPython in 2020</title>
    <id>http://dopieralski.pl/posts/2020-01-02-circuitpython/</id>
    <updated>2020-01-02T00:00:00Z</updated>
    <published>2020-01-02T00:00:00Z</published>
    <link href="http://dopieralski.pl/posts/2020-01-02-circuitpython/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;circuitpython-in-2020&quot;&gt;

&lt;p&gt;It looks like I’m mostly using this blog to answer &lt;a class=&quot;reference external&quot; href=&quot;https://blog.adafruit.com/2020/01/01/what-do-you-want-from-circuitpython-in-2020-circuitpython2020-circuitpython/&quot;&gt;Adafruit’s prompts for
feedback on CircuitPython&lt;/a&gt;. Oh well, so be it.&lt;/p&gt;
&lt;div class=&quot;section&quot; id=&quot;the-projects&quot;&gt;
&lt;h2&gt;The Projects&lt;/h2&gt;
&lt;div class=&quot;section&quot; id=&quot;pewpew&quot;&gt;
&lt;h3&gt;PewPew&lt;/h3&gt;
&lt;div class=&quot;system-message&quot;&gt;
&lt;p class=&quot;system-message-title&quot;&gt;System Message: INFO/1 (&lt;tt class=&quot;docutils&quot;&gt;/home/sheep/dev/blog/blog/posts/2020-01-02-circuitpython.rst&lt;/tt&gt;, line 6); &lt;em&gt;&lt;a href=&quot;#id1&quot;&gt;backlink&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
Duplicate implicit target name: “pewpew”.&lt;/div&gt;
&lt;p&gt;The &lt;a class=&quot;reference external&quot; href=&quot;http://pewpew.rtfd.io&quot;&gt;PewPew&lt;/a&gt; educational game console project is still
alive, and there has been some progress. EuroPython gave out 1400 devices to
Python developers at a conference, and I helped design and manufacture some
custom units for some more conferences. &lt;a class=&quot;reference external&quot; href=&quot;http://makerfabs.com&quot;&gt;MakerFabs&lt;/a&gt; —
the fabrication company that is helping me with this is now selling PewPew
Standalone consoles for $10 a piece for everyone who have any kind of workshop,
entertainment or hacking needs. There is even a mailing list at
&lt;code class=&quot;docutils literal notranslate&quot;&gt;&lt;span class=&quot;pre&quot;&gt;pewpew&amp;#64;python.org&lt;/span&gt;&lt;/code&gt; and I’m trying to keep everyone updated by sending
monthly summaries to it (I only skipped one month so far).&lt;/p&gt;
&lt;p&gt;However, the device is not perfect, and I have decided to pursue the successor
to &lt;a class=&quot;reference external&quot; href=&quot;http://ugame.rtfd.io&quot;&gt;µGame&lt;/a&gt; to try an fix that. It’s a blend of PewPew
and µGame, being able to run programs for both (and also MakerCode Arcade and
PyGamer/PyBadge device too). It’s going to be considerably cheaper than
Adafruit’s offerings, but it’s also not supposed to be competing with them.
I needed the display to show the error messages, because those turned out to
be the hardest part of working with PewPews — not everyone can get the REPL
going easily. In any case, I worked on the successor, PewPew M4 for a good part
of the last year, and it’s ready now. I’m going to be sending out the first
units to reviewers and people interested in development for it soon, and then
we will try to make the devices available through MakerFabs just like the
PewPew Standalone.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;robots&quot;&gt;
&lt;h3&gt;Robots&lt;/h3&gt;
&lt;p&gt;I still have the low-cost spider-like walking robots on my drawing boards, and
they are going to run CircuitPython too. The plan to re-start the development
with a more integrated Kubik M0 unfortunately failed: after fixing some bugs
with PWM channels, it turned out that the SAMD21 that I was using simply
doesn’t have enough PWM outputs to drive all the 12 servos of this robot. That
means I probably need a bigger chip, and it would probably make more sense to
use the BLE-capable NRF52840 and not the SAMD51. But that also means it will be
Kubik M4 and not M0, and I still need to do my research about the NRF52840. I
have the NRF52840 Feather at hand, but it’s the non-express version, which is
apparently no longer supported. So either I bring back the support for it, hack
an SPI flash chip on it, or switch to an express board. We will see.&lt;/p&gt;
&lt;p&gt;In the mean time, I also resurrected the SpiderWing, which can work with pretty
much any Feather board. The recent modifications added battery protection to
it, which is an important feature. I will use it for a platform for
experimenting with BLE robots.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;keyboards&quot;&gt;
&lt;h3&gt;Keyboards&lt;/h3&gt;
&lt;p&gt;After visiting a local annual meetup of mechanical keyboard enthusiasts, I got
an urge to make a very flat keyboard (just a PCB and low-profile choc
switches), and since I didn’t have much room on it, I decided to put a SAMD21
on it. Once I had that, it was very easy to write a simple firmware for it,
especially since the USB support really improved recently. There was no support
for CapsLock, but it was surprisingly easy to hack it on with the help of
Adafruit staff, and there is now a pull request in works for adding it
properly. The ability to disable the drive, midi, mouse and all those other
funky USB endpoints also helped a lot.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;circuitpython-development&quot;&gt;
&lt;h2&gt;CircuitPython Development&lt;/h2&gt;
&lt;p&gt;I ended up not contributing as much as I wanted to CircuitPython development
this last year, but I am still amazed with the progress it made. The display
support is now very good, and there is no need for my TextMode library anymore.
You can do pretty much anything with the displayio that you could do with the
stage library, and much more on top of that. The stage is still a little bit
faster and uses a bit less memory (because of the limitations it has), so I
keep using and maintaining it.&lt;/p&gt;
&lt;p&gt;I still didn’t have any time to play with the wireless capabilities: the Nina
firmware, the awesome BLE work, the LoRa and other radio modules. Maybe this
year I will have more luck with it.&lt;/p&gt;
&lt;p&gt;I did add (non-animated) GIF support to the loadimage library (and also to
stage), and it could easily be extended to support animation as well. I also
did some small improvement with buffer allocation for the audio module, and
that CapsLock support thing most recently — but I would really love to do more.&lt;/p&gt;
&lt;p&gt;I didn’t get to implement any of my last-year crazy project ideas. They are up
for grabs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;micropython-development&quot;&gt;
&lt;h2&gt;MicroPython Development&lt;/h2&gt;
&lt;p&gt;Even though I no longer pay much attention to that project, I did notice some
progress in there. Most importantly for me, there is now some support for
dynamically loadable C modules, so I tried to port the Stage library to that.
Unfortunately it doesn’t seem to be mature/featurefull/finished enough for it
to work, and the help is as usual non-existent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;future-plans&quot;&gt;
&lt;h2&gt;Future Plans&lt;/h2&gt;
&lt;p&gt;I don’t really have any are in CircuitPython right now that I would
particularly want to work on and improve. I really want to give more focus
to the PewPew, the Stage library, and the examples and tutorials for it.&lt;/p&gt;
&lt;p&gt;I would also love to see the PewPew M4 become popular/useful, and people
writing games for it. I think there is a need for some place where people
can find CircuitPython-based games for the µGame, PyBadge, PyGamer, PyPortal,
and PewPew M4, download and play them, see the code, read the tutorials about
making them, and so on. I also think it would be nice if game creators could
sell their games — I’m thinking about a platform like itch.io for this.&lt;/p&gt;
&lt;p&gt;I want to get back to the robots for a little bit, and I have some nice ideas
for them, though nothing overly specific yet. We will see how it goes with the
wireless communication research.&lt;/p&gt;
&lt;p&gt;I’m waiting with bated breath for the ESP32-S2 board, but it will be probably
another year or two before CircuitPython works on that (if ever).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;section&quot; id=&quot;summary&quot;&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;It has been an amazing year for CircuitPython, and a huge amount of work has
been done. I wish I could have been more involved, but day job interferes. I’m
going to bring back some of my old projects this year and see if I can make
them work even better with CircuitPython now.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://dopieralski.pl/blog/atom.xml">
    <title type="text">Boredom</title>
    <id>http://dopieralski.pl/posts/2019-03-26-boredom/</id>
    <updated>2019-03-26T00:00:00Z</updated>
    <published>2019-03-26T00:00:00Z</published>
    <link href="http://dopieralski.pl/posts/2019-03-26-boredom/" />
    <author>
      <name></name>
    </author>
    <content type="html">&lt;div class=&quot;section&quot; id=&quot;boredom&quot;&gt;

&lt;p&gt;Would you like to be more creative? More eloquent in conversations? More
intelligent in decision making? Better at problem solving? More attentive? Able
to read those difficult books? Focus deeply on the project at hand? There is a
simple solution for all this: embrace boredom.&lt;/p&gt;
&lt;p&gt;It takes some effort and training, but I can assure you that it certainly is
worth it. Whenever you are waiting, whenever you don’t have anything urgent to
do, whenever you don’t particularly feel like doing something, just be bored.
Forget about taking out your phone and mindlessly scrolling through the social
network stream, frantically checking your messages, or playing silly games
designed to get you addicted to them. Just stay there and think about whatever
comes to your mind: that conversation you had last week with a friend about
morality, that book you are reading, that project you were planning to start,
what you will tell the person you are waiting for when they arrive, what you
will do next, etc. — it doesn’t really matter what you think about, just let
your mind wander.&lt;/p&gt;
&lt;p&gt;The effect of this? You will have more motivation to actually work on that
project, you will understand the book better, you will have interesting things
to say in the next conversation, you will enjoy your time with that person
more, and so on. Because your mind will have done some of the work up front and
will be prepared. Because you will also think about things that you wouldn’t
notice otherwise. Because you will be more rested and ready to pay more
attention to the here and now.&lt;/p&gt;
&lt;p&gt;Obviously, this is not a silver bullet. It doesn’t work when you are tired,
depressed, stressed and burned out: you have to make sure you take care of your
sleep deprivation, depression and anxiety first — don’t be afraid to talk to a
doctor about them, they are often very easily cured. But once you have that
under control, make sure to leave yourself as much time as possible for doing
absolutely nothing. Literally staring at a wall. It will make everything else
you do much better.&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
