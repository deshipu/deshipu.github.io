<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>http://dopieralski.pl/</id>
  <title>dopieralski.pl</title>
  <updated>2025-05-09T19:34:02.303973+00:00</updated>
  <link href="http://dopieralski.pl/"/>
  <link href="http://dopieralski.pl/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.org/" version="0.10.33">ABlog</generator>
  <entry>
    <id>http://dopieralski.pl/posts/2021-01-09-circuitpython/</id>
    <title>CircuitPython in 2021</title>
    <updated>2021-01-09T00:00:00+01:00</updated>
    <content type="html">&lt;section id="circuitpython-in-2021"&gt;

&lt;p&gt;It is once again time for &lt;a class="reference external" href="https://blog.adafruit.com/2021/01/01/where-should-circuitpython-go-in-2021-circuitpython2021-circuitpython/"&gt;Adafruit’s prompt for
feedback on CircuitPython&lt;/a&gt;. Let’s see what I did
last year and what I hope for this year.&lt;/p&gt;
&lt;section id="the-projects"&gt;
&lt;h2&gt;The Projects&lt;/h2&gt;
&lt;p&gt;This year was slow project-wise. I did some work on a new, cheaper version of
my walking robots, but they still need a lot of programming work. Then I went
into the rabbit hole of low-profile mechanical keyboards, built half a dozen of
them, until I made a perfect one for me. In the process I also made a library
for keyboards that has substantially lower resource requirements than existing
ones.&lt;/p&gt;
&lt;p&gt;I also ported the Stage game library to a few new platforms, re-made the menu
program for it, and merged a couple of improvements from other contributors.&lt;/p&gt;
&lt;p&gt;Right now I’m working on a 6-hole MIDI ocarina, and I’m considering doing a
business-card sized flat version of PewPew Standalone, with bi-color LEDs.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-future"&gt;
&lt;h2&gt;The Future&lt;/h2&gt;
&lt;p&gt;After most of my plans went awry in 2020, I’m careful about planning anything
this year. I think I will just be making small projects to keep myself sane,
and see how the situation develops.&lt;/p&gt;
&lt;p&gt;In terms of development of CircuitPython, I’m really looking forward to the
dynamic USB descriptors, because that will let me make my keyboards more usable
for the general public, and then it will make sense to actually publish them
properly.&lt;/p&gt;
&lt;p&gt;It’s also nice to see the work around deep sleep, as this might let me save on
some parts in the future, moving the power switch to software.&lt;/p&gt;
&lt;p&gt;The work around reset, safe mode and what file should be run after reset will
allow me optimize the menu program for PewPews a little better, giving more
memory to the games.&lt;/p&gt;
&lt;p&gt;From what I can see most work is still focused on ESP32-S2, but I don’t find
this particularly interesting for myself. I’m not a great fan of wireless
solutions in general, and WiFi in particular seems a bit heavy for
microcontroller-based projects. The need for certification also limits greatly
what kind of projects I could make with this.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It’s great to see the CircuitPython project progressing and getting more
popular, and I am very grateful to all contributors for it. Having said that,
I think it is slowly reaching a point where it has most of what is needed, so
it’s difficult to be excited about new developments — they are no longer such
big steps forward. Of course in the long run it is a good thing — we can focus
more on things we are building with the tool, not on the tool itself.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://dopieralski.pl/posts/2021-01-09-circuitpython/" rel="alternate"/>
    <summary>It is once again time for Adafruit’s prompt for
feedback on CircuitPython. Let’s see what I did
last year and what I hope for this year.</summary>
    <published>2021-01-09T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://dopieralski.pl/posts/2021-12-19-small-robots/</id>
    <title>Build Small Robots</title>
    <updated>2021-12-19T00:00:00+01:00</updated>
    <content type="html">&lt;section id="build-small-robots"&gt;

&lt;p&gt;In which we learn why it’s much easier to build small robots than large ones.&lt;/p&gt;
&lt;section id="the-cube-law"&gt;
&lt;h2&gt;The Cube Law&lt;/h2&gt;
&lt;p&gt;A lot of reasons for making your robots small comes from the cube law. This law
gives you the relation between the size of an object and its volume (there is
also the square law, that gives you the relation between the size and the
area). It says that as your robot grows in size, its volume will grow
proportionally to the third power of that size (also called cube, hence the
law’s name). Consider the following two example robots:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Dimensions 5×5×5cm, volume 125cm³, weight 125g&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Dimensions 10×10×10cm, volume 1000cm³, weight 1000g&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(I’m assuming that in both cases the average density of the robot doesn’t
change, that is, that it’s not almost empty in the second case. As we will see
later, that’s quite accurate, or even optimistic.)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="actuator-strength"&gt;
&lt;h2&gt;Actuator Strength&lt;/h2&gt;
&lt;p&gt;“Actuator” is a fancy name for whatever makes your robot move: servo, motor,
artificial muscle, memory metal, hydraulics, pneumatics, etc. As the size and
weight of your robot grows, so has to the strength of the actuators it uses.&lt;/p&gt;
&lt;p&gt;For instance, consider a servo. Its strength (in this case called torque) is
usually expressed in kilograms (of force) times centimeters, or newton meters.
If a servo has 1kg×cm of torque, it means it can lift 1kg of weight on a 1cm
long lever. Since the levers scale linearly, it means it could also lift 0.5kg
on 2cm long lever, or 2kg on 0.5cm long lever, etc. You can see already that if
you make the robot’s legs twice as long, you will need twice as much torque.
But that’s assuming that the weight remains the same. From the cube law you
know, that the weight is going to grow fast, so in reality larger robots will
need a lot more torque.&lt;/p&gt;
&lt;p&gt;But there is another thing. The smaller the servos, the lighter and cheaper
they are. Sure, the torque also gets smaller, but not nearly as fast. Consider
those two example servos:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;HK-282A Ultra-Micro Servo: weight 2.2g, torque 0.11kg*cm, price 3 EUR&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;S3027 Metal Gear Servo: weight 20g, torque 2.5kg*cm, price 20 EUR&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you can see, the smaller servo can raise itself on a lever half a meter
long! The larger one, almost 10 times heavier and over 20 times stronger, can
only do 125cm. And it will be similar with any other parameter: price, speed,
amount of current needed, etc. At some point the parameters will be so bad,
that you will have to switch to hydraulics.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="material-strength"&gt;
&lt;h2&gt;Material Strength&lt;/h2&gt;
&lt;p&gt;It’s not just the actuators that need to be stronger. They are connected to the
structural elements, that have to bear all that force too. And thanks to the
cube law, it doesn’t suffice for them to be just longer and thicker – they
actually have to be made from stronger and lighter materials.&lt;/p&gt;
&lt;p&gt;Stronger materials are harder to machine and generally work with. You can no
longer get away with hot-gluing parts together: you will need nuts and bolts,
and possibly also special mechanical design. And you will need specialized
tools.&lt;/p&gt;
&lt;p&gt;And when you finally get your robot together, it will be very fragile. Why do
you think all those large robots in laboratories always operate with a safety
line hanging from the ceiling over them? That’s because if they fall down, they
will smash into pieces. The materials they use are strong enough to hold them
together, but not strong enough to survive a fall.&lt;/p&gt;
&lt;p&gt;On the other hand, my smallest robots survived repeated falls from my desk to
the floor without even a scratch. If you make a robot the size of a cockroach,
you can drop it from the roof of a building. It will simply not gain enough
speed falling through the air to damage it on impacting the floor.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="inertia"&gt;
&lt;h2&gt;Inertia&lt;/h2&gt;
&lt;p&gt;So you finished your large robot, and now you are programming it. For a start,
you just make the limbs move straight to their destinations and stopping once
they get there. Your robot falls, the limbs break off, the servos strip gears
and there are huge spikes of current drawn from the battery. What happens?&lt;/p&gt;
&lt;p&gt;Well, you cannot just move a heavy object with high speed and then have it stop
instantly. Inertia will make it keep on moving, and the servomechanisms will
need to do a lot of extra work (and endure great forces of stress) to stop it
and move it back where it belongs. That also applies when moving the whole body
of the robot while walking – your effective Zero Movement Point no longer
coincides with the center of mass of your robot. You have to start taking the
speed and acceleration into consideration in your motion planning, and thus all
your movement equations become second degree differential equations without a
closed-form solution. Yay!&lt;/p&gt;
&lt;p&gt;On the other hand, if you keep the robot small, all its elements light and the
servos have abundance of power, you can pretty much ignore inertia and get away
with writing much simpler code that only takes into account the current
positions of the limbs.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="safety"&gt;
&lt;h2&gt;Safety&lt;/h2&gt;
&lt;p&gt;So you think you have the budget, you have the materials and tools, you have
the programming expertise and strong servos to handle the inertia, what could
possibly happen.&lt;/p&gt;
&lt;p&gt;Strong servos, larger batteries, high currents, long reach of the limbs, high
movement speeds – it all means trouble. You will need safety measures. Force
stop buttons, one on the robot itself (hardware, brutally cutting the power),
and one remote (so that you don’t have to chase your robot through a hole in
made in the wall). Suspensions mechanisms. Safety gear for you to wear. Fire
extinguisher capable of containing a LiPo battery fire. Circuit breakers.
Someone to check periodically if you are trapped under your robot’s weight…&lt;/p&gt;
&lt;p&gt;It’s all extra work, extra cost and extra risk. Why take it, if you can instead
have a robot the size of a hamster that behaves funny when something goes
wrong, and tickles instead of crushing your bones?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="convenience"&gt;
&lt;h2&gt;Convenience&lt;/h2&gt;
&lt;p&gt;I left the most important reason for the end. Small robots are convenient.&lt;/p&gt;
&lt;p&gt;You can work with them directly on your desktop, connect them to your computer,
adjust easily with just a screwdriver. You can store them in your drawer. You
can recharge them from your phone charger. You can take them with you to
conferences and workshops. You can fly with them in your carry-on baggage (as
long as they don’t have anything that looks like a clock on them). When
something goes wrong or breaks, you can simply pick them up and fix.&lt;/p&gt;
&lt;p&gt;Not so easy with larger robots. You will need to test them on the floor, in a
garage or even outside. You will need a complete suite of tools to work on
them, and a dedicated storage space to keep them. Special battery charger.
Taking them anywhere involves careful packaging or even loading onto a car. For
flight, you have to remove anything that is sensitive to low temperature and
pressure, as it’s going to go in the check-in baggage. Also be prepared to have
to re-fasten all the screws on it that came loose due to vibrations. When
something goes wrong or breaks, you have to call the mason to fix your house…&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Make your robots as small, as practically possible.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://dopieralski.pl/posts/2021-12-19-small-robots/" rel="alternate"/>
    <summary>In which we learn why it’s much easier to build small robots than large ones.</summary>
    <published>2021-12-19T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://dopieralski.pl/posts/2022-01-22-circuitpython/</id>
    <title>CircuitPython in 2022</title>
    <updated>2022-01-22T00:00:00+01:00</updated>
    <content type="html">&lt;section id="circuitpython-in-2022"&gt;

&lt;p&gt;As every year, it’s time for a yearly summary and plans of all things I do
that are related to CircuitPython.&lt;/p&gt;
&lt;section id="the-projects"&gt;
&lt;h2&gt;The Projects&lt;/h2&gt;
&lt;p&gt;This year I made a record number of keyboards, and also greatly improved my
keyboard library, uKeeb. Some features were added, because CircuitPython now
supports them: CapsLock LED, disabled disk and console, NKRO and BOOT modes,
keypad module. Others I added as new keyboards needed them: proper hold/tap
with rollover timeout, layer switching improvements, mouse support, LED
animations.&lt;/p&gt;
&lt;p&gt;My FluffBug robot is now at hardware version 5, but software-wise there was
no progress. I got the per-leg inverse kinematics done, and I should write
the walking code, but I can’t find the motivation.&lt;/p&gt;
&lt;p&gt;The MIDI Ocarina is now at version 3. I gave up on the barometric pressure
sensor for detecting blowing, as its recovery time was poor, and instead
switched to a PDM microphone using audiobusio. This works great. I still need
to write the MIDI code for it.&lt;/p&gt;
&lt;p&gt;I tried the new camera code, but I couldn’t get it to work with the camera
breakouts that I have. Either I’m using wrong pins, or something broke in the
IDF version I used. I have no energy to investigate this further.&lt;/p&gt;
&lt;p&gt;I also gave up on making the uGame console work with newer versions of
CircuitPython – the changes in interrupt handling and time module related to
adding sleep made the SAMD21 port work so erratically, that I simply gave up.
I did fix the PewPew code by avoiding using the time module altogether.&lt;/p&gt;
&lt;p&gt;There is also a but in the PWM code on SAMD that makes it hang completely
in a loop waiting for a register flag that never gets set. I got that far
debugging it, but why it never gets set is a mystery to me, and nobody
seems to be interested in fixing it. I worked around it in Stage library
by simply setting the backlight pin high, not using PWM at all, but I got
bitten by the same bug recently in the ocarina code.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-future"&gt;
&lt;h2&gt;The Future&lt;/h2&gt;
&lt;p&gt;This year I want to finish FluffBug at least to the point where it walks and
uses the leg sensors and the distance sensors. I wish I could get the camera
to work with it as well. I might also try a gesture sensor, and an
accelerometer.&lt;/p&gt;
&lt;p&gt;I received a nice ESP32-S2 development board with a display from MakerFabs,
and I want to get the display working with displayio. Unfortunately it’s a
16-bit parallel, with non-consecutive data pins, so I would need to work
on the relevant module first. No idea how much work it would require.&lt;/p&gt;
&lt;p&gt;There is a cool watch project using a SAML22 microcontroller, which should
be very similar to SAMD21. The author mentioned that he wants to get a port
of CircuitPython working on it. I’m very interested in this, because that
chip also has an LCD-driving circuitry, which would allow me to make even
cheaper version of the PewPew console, with a custom LCD screen.&lt;/p&gt;
&lt;p&gt;I might be making another handheld game console, with a 3.2”
screen and ESP32-S2 as the brains, but I’m not entirely sure yet. I’m doing
research on how viable it would be, and collecting parts.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This year brought some cool developments around USB and keyboards, but also
a lot of frustration with keeping my existing projects working despite new
bugs. The SAMD family seems to now get very little attention, and it suffered
greatly with the addition of sleep support. Not being able to find and fix
those bugs is very frustrating, and drains energy I could use on projects
instead. The new boards are ridiculously powerful, but considerably more
complex to use in projects, unless using a ready development board. I think
I will focus on the Lolin S2 Mini boards for my projects this year, however,
while I mentioned some things I hope to work on, I am aware that I have
very little energy left for this. Hopefully my health and the overall global
situation will improve.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://dopieralski.pl/posts/2022-01-22-circuitpython/" rel="alternate"/>
    <summary>As every year, it’s time for a yearly summary and plans of all things I do
that are related to CircuitPython.</summary>
    <published>2022-01-22T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://dopieralski.pl/posts/2023-02-10-typesetting/</id>
    <title>Design for Exploration</title>
    <updated>2023-02-10T00:00:00+01:00</updated>
    <content type="html">&lt;section id="design-for-exploration"&gt;

&lt;section id="typesetting-software"&gt;
&lt;h2&gt;Typesetting Software&lt;/h2&gt;
&lt;p&gt;Imagine a text processor, similar to Wordstar, but more closely modelled around
the tried and tested workflows of professional typesetters.&lt;/p&gt;
&lt;p&gt;You begin by composing the text of your copy. But to avoid mistakes and to make
use of the saved work you did before, you don’t simply type the words. You
select them from a set of dictionaries that were created by other users,
organized according to whatever needs those users had. Of course if you need
any word that is not already in the dictionary, you can always create your own
custom dictionary and add any words you need to it.&lt;/p&gt;
&lt;p&gt;Once you have all your words, you connect them into sentences. Each sentence gets assigned a name, so that you can refer to it later on easily.&lt;/p&gt;
&lt;p&gt;Then you have to select the fonts for your words. Most words will already have their fonts assigned by default in the dictionary, but you might want to make a word bold or italic, or select alternate forms for some letters, maybe a long S or some ligature, or change the kerning subtly to make it look better.&lt;/p&gt;
&lt;p&gt;Finally, you get to place all those words. You will have them dumped on the page, and you can move them around and arrange them carefully. The sentence names you set earlier are used to show you the “ratlines” connecting the words, to help you get them in the right order. You might even use an “autotypesetter” to arrange the words automatically, but usually you will need to do some manual adjustments.&lt;/p&gt;
&lt;p&gt;Once you have all that, you can simply hit “print” to have a beautiful page of text printed.&lt;/p&gt;
&lt;p&gt;If the above described user interface seems to you to be unnecessarily clunky
and complicated for such a “simple” task as writing a page of text to be
printed, remember that the process is only seems to be simple when you don’t
care about all those details. The user interface is fake, of course, but it’s
an example of something you might come up with if you researched carefully how
the printing press staff is going about the task, and tried to re-create that
process in the computer.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="kicad"&gt;
&lt;h2&gt;KiCAD&lt;/h2&gt;
&lt;p&gt;That is, incidentally, exactly what the authors of PCB design software KiCAD
did, and the end result is equally baroque:&lt;/p&gt;
&lt;p&gt;You have to start by drawing a schematic for the circuit you plan to design. Just like with the words, you don’t simply draw the symbols that you need, but instead you select them from a vast library of electronic symbols, divided into several “libraries” by random criteria. If you need a symbol that doesn’t exist in any of those libraries, you have to draw it, place it in a new library, and then you can select it from there.&lt;/p&gt;
&lt;p&gt;Once you have all your symbols placed, you connect them with wires. And again,
all wires that are connected together form a net, and get assigned a unique net
name. You will need those names later. Even if two nets are not visually
connected, but share the same net, they are considered connected, because who
cares how hard that is to read. Our program only cares about the nets.&lt;/p&gt;
&lt;p&gt;Once you have your schematic drawn, you have to select a footprint for each of the symbols. A footprint is the arrangement of holes and pads on the PCB where the physical part will be placed. And of course many symbols will already have a default footprint, but some will have several possibilities, and if it’s a new part, you will have to make a custom one yourself. So you still have to got through this step manually.&lt;/p&gt;
&lt;p&gt;And finally, you get to see the actual layout of your PCB, with all the
footprints dumped into a pile, and you can start arranging them, and connecting
them with traces. There are tools like the autorouter that can help you with
the connections sometimes, but they mostly come up with solutions that are
worse than what you could do by hand.&lt;/p&gt;
&lt;p&gt;Once you have it all placed and connected, you can generate the gerber files and send them to your favorite PCB factory to be manufactured.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="can-we-do-better"&gt;
&lt;h2&gt;Can we do better?&lt;/h2&gt;
&lt;p&gt;I sure hope so! I mean, modern text processors don’t work like described here,
and while you often don’t have such precise control on the output, they seem to
be much easier to use. How do they do that?&lt;/p&gt;
&lt;p&gt;Well, first of all, they have given up on the division between the manuscript
and the printed page. They show you the preview of the printed page right away
– or at least some approximation of it, with some extra information like
margins paragraph markers included. This merging of the two views, makes it
much more intuitive, and obviates the need to go back and forth between them to
make changes and then to see the effects of those changes and so on.&lt;/p&gt;
&lt;p&gt;You also don’t need to search the dictionaries. You just type the word you
need, and if it’s not found in any dictionary, it will be marked by
spellchecker as suspicious, but you are still allowed to have it on your page.
And if you know you are going to use that new word more, adding it to the
custom dictionary is just a question of a single command.&lt;/p&gt;
&lt;p&gt;And you don’t have to assign a font and style to every word separately. You use
the defaults most of the time, and then you can select parts of the text and
change those defaults in bulk as needed. If you really want to, you can even
change ligatures and alternate letter forms, though that is usually automated
well enough that most people never need to touch it.&lt;/p&gt;
&lt;p&gt;Of course you are still limited to the fonts installed on your system, and if
you need a custom glyph that is not included in any font, you will need to
either make a new font (which is very complicated) or cheat by including it as
an image or doing some similar trick. Font selection dialogs came a long way in
modern word processors, but they still suck a lot. There is a lot that could be
done to improve on them, starting with proper tagging and categorizing of the
fonts themselves. Perhaps at some point we will be able to just describe what
we want, instead of having to look for it in a long list? And maybe one day we
will find a better way of sorting fonts than by name.&lt;/p&gt;
&lt;p&gt;But still, I think the text editing came a long way compared to some other
computer assisted tasks, like PCB design.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://dopieralski.pl/posts/2023-02-10-typesetting/" rel="alternate"/>
    <summary>Imagine a text processor, similar to Wordstar, but more closely modelled around
the tried and tested workflows of professional typesetters.</summary>
    <published>2023-02-10T00:00:00+01:00</published>
  </entry>
  <entry>
    <id>http://dopieralski.pl/posts/2025-05-09-politics/</id>
    <title>Political and Practical Worldviews</title>
    <updated>2025-05-09T00:00:00+02:00</updated>
    <content type="html">&lt;section id="political-and-practical-worldviews"&gt;

&lt;section id="slavic-gods"&gt;
&lt;h2&gt;Slavic Gods&lt;/h2&gt;
&lt;p&gt;Before we were somewhat brutally brought into the loving embrace of the Roman
Catholic Church by our considerate neighbours, my country had its own “pagan”
religion, with its own mythology and traditions. A lot of the traditions
survive in some way, because you can’t tell people they no longer have
a holiday on a given day just because they are worshipping a different god
now, but most information about the beliefs of my ancestors have been
judiciously eradicated by the same people who were at the time responsible for
preserving history – the chroniclers were mostly priests at the time, after
all. Some of it has been reconstructed from mentions in various historical
texts, but there is very little that is certain. Which is a great shame,
because those “primitive” mythologies often were records of knowledge about
the world and its workings, presented in a form that is easy for people to
understand – attitudes and relationships. That’s why gods in them are mostly
humans with special powers connected with the nature. And that “pagan”
mythology could tell us a lot about how the society functioned back then.&lt;/p&gt;
&lt;p&gt;For example, one particularly well attested god (possibly because it was easy
to compare with similar Greek, Roman and Nordic gods) was the god of thunder
named Perun. He controlled the weather and could send storms and control the
lightning. His symbol was an oak tree (because those trees were often hit by
lightnings), and he was said to live on tops of the mountains. He generally
fits the Proto-Indo-European pattern of a storm god. He was also the god of
warriors and battle, and he would punish dishonorable behavior with death in
battle. He was worshipped by warriors and nobility, and his temples and
statues would often stand on tops of hills, inside city walls.&lt;/p&gt;
&lt;p&gt;Some sources indicate that Perun had a competing god that is, unfortunately,
not as well attested. His name was Veles, and he was the god of cattle,
craftsmen, and science (well, magic and secret knowledge, but that’s how it
worked back then). His statues would stand outside the city walls, in the
village in the valley. He was said to live underground, and to take care of
the souls of dead people. He would punish breaking of contracts with
a disease. He was worshipped by what we would today call “upper-middle class”
– various craftsmen, artists, shepherds and cowherds, smiths, and so on.&lt;/p&gt;
&lt;p&gt;As I said, there are literally only a handful sources mentioning Veles by
name, and historians mostly reconstructed him from stories that survived to
the modern times with the gods replaced by saints. In particular, the story of
Saint George killing a dragon seems to be such a remnant. It’s another pattern
that repeats all over the Proto-Indo-Europen mythology. The story is rather
simple: there is a drought, and Perun discovers it’s caused by Veles in the
form of a giant snake blocking the water at the source. So he challenges him
to a fight, which is visible to the people as a storm, with lightning bolts
hitting the giant snake. Veles avoids defeat using various tricks, but
eventually escapes and hides, releasing the water, which then falls from the
sky in the form of rain. Prosperity returns until the next time.&lt;/p&gt;
&lt;p&gt;Some historians insist that this is supposed to explain the seasons, but I’m
doubtful. I think this story tells us about a different social mechanic, one
that is much more important.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="systems-of-survival"&gt;
&lt;h2&gt;Systems of Survival&lt;/h2&gt;
&lt;p&gt;Some time ago I stumbled into a small book written by the famous architect and
urbanist Jane Jacobs, titled “Systems of Survival”. Unlike her other books,
it’s not about cities, or economy, or urban planning. It’s about morality.
Specifically, it’s about morals in professional settings. In that book she
identifies two “moral syndromes”, as she calls them – two ways at looking at
the world and deciding what is good and what is bad. The two ways are both
consistent internally, but often conflict with each other. She named them
“commercial” and “guardian” (she initially wanted to call it “raider”, but
realized how intimately it is connected with protecting territory). She notes
that a lot of morally questionable worldviews come from mixing elements from
those two systems, creating internally inconsistent “monstrous” systems.&lt;/p&gt;
&lt;p&gt;She also notes that in the modern world it’s impossible to survive sticking to
only one of those worldviews. We have to switch between them depending on the
context, using the commercial syndrome in trade, science, and technology, and
the guardian syndrome in bureaucracy, politics, and public services.&lt;/p&gt;
&lt;p&gt;I encourage you to read the book if you can, or at least look at the Wikipedia
summary of it. It made a huge impression on me, because at the time I was
investigating a different duality I noticed in my profession.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="wizards-and-warlocks"&gt;
&lt;h2&gt;Wizards and Warlocks&lt;/h2&gt;
&lt;p&gt;I’m a software engineer. I maintain and develop software for a living. That
means that I spend a lot of time thinking about programming, and also talk to
other people about it. I couldn’t help but notice that most arguments in the
programming practice are between two distinct styles of reasoning about
computer programs. When I looked at it closer, I decided to call the people
promoting those styles “Wizards” and “Warlocks”.&lt;/p&gt;
&lt;p&gt;Wizards really appreciate the effort of writing code that is correct,
performant and generally elegant. They care about the code itself very much.
They want to understand it all, and to have full control over every aspect of
it. Even if they include some dependency, it’s only after they have reviewed
it, and possibly even forked and modified it to better match what they expect.
They tend to work on relatively small, but high quality projects. They also
tend to stick to a single programming language of choice for the given
project, and are not afraid of adding things to it if they are required for
their task. They tend to stick to a single project at a time, and get back to
it to gradually improve it.&lt;/p&gt;
&lt;p&gt;Warlocks just want to get things done. If there is a library or framework that
already does most of what they need, they are happy to use it. They will copy
snippets of code from random websites, and even use code generation tools. If
they are missing something in one language or framework, they don’t mind
changing to another one that has it, or creating a hybrid solution that uses
both. They usually don’t much care for formal correctness, performance, or any
kind of aesthetics in what they cobble together. They just want it to do the
thing they need good enough for their needs, and they don’t really care how it
is done under the hood. They also don’t come back to old code, unless they
have to fix something.&lt;/p&gt;
&lt;p&gt;Of course in real life nobody is fully a wizard or a warlock. You have to
switch between the two approaches as needed. Sometimes practicality beats
purity, sometimes technical debt is unacceptable and needs to be minimized.
Sometimes you want to move fast and break things, and sometimes you want to
move slowly and fix them. Knowing when to use which style is an important
part of being a software engineer.&lt;/p&gt;
&lt;p&gt;That doesn’t mean there aren’t biases. In fact, most people prefer one style
of work over the other. There are even programming languages and other tools
that specifically encourage of those styles over the other. While you pick
them depending on the context, there is always room for interpretation, and
arguments, and often you will see the same people fall consistently on either
side of those arguments. Some people simply prefer to be wizards or warlocks.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="dualities"&gt;
&lt;h2&gt;Dualities&lt;/h2&gt;
&lt;p&gt;It’s easy to find opposing dualities. Good and evil, light and dark, order and
chaos, female and male – as soon as we can think about it, we can split it
into two opposing states. But most of those a gradients. There are a few
dualities where we can see the two opposing sides, but nothing in between.
For instance, there are visual tricks, like the Necker cube, where we can
interpret the same picture in two completely different ways, but not both at
once. Which interpretation we choose depends on a complex mixture of visual
hints, lighting, situational context, and personal preference. But we can also
consciously force ourselves to see it one way or the other, if we want to.&lt;/p&gt;
&lt;p&gt;The moral syndromes identified by Jane Jacobs seem to be like that. Once you
decide on one feature – for example that it is good to do mutually beneficial
trade – all the rest jumps in place: the need for honesty and contracts, the
universal rights, shunning of force, thriftiness, etc. It’s all or nothing. If
you cherry-pick features from both moral syndromes, you inevitably get an
inconsistent mixture that is morally questionable. And just like with the
Necker cube, we seem to naturally pick the syndrome to use based on subtle
hints, situation, and preference. For example, if the matter at hand is
related to territory of some kind, we tend to pick the guardian moral
syndrome. But I think they are also kinda sticky – once we decide to use one
and not the other in a given situation, we will tend to repeat that choice
again in a similar situation, unless we consciously decide otherwise, or
something happens to change our minds. So as we go through our lives, we
collect examples of situations and assign them one or the other moral
syndrome.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="more-than-a-syndrome"&gt;
&lt;h2&gt;More than a Syndrome&lt;/h2&gt;
&lt;p&gt;Jane Jacobs called her findings “syndromes”, because to her that is what it
was – literally groups of symptoms. In her book she made observations about
them, but she refrained from jumping to any conclusions, or speculating about
the mechanism that creates them.&lt;/p&gt;
&lt;p&gt;We don’t have to be so restrained ourselves. In fact, I’m now going to make
wild generalizations and come to crazy conclusions without so much as a shred
of proof or research. I’m going to do it because it’s fun, and because I think
it’s useful to imagine what we &lt;em&gt;could&lt;/em&gt; find there if we took the time to look
closer and do proper research. You can think of it like a science fiction book
about how alien civilizations could look like – it might be inspired by our
existing knowledge, but most of it is just fantasy and speculation. Enjoy.&lt;/p&gt;
&lt;p&gt;So let’s stop calling them “syndromes” and give them a more representative
name: worldviews. Also, I’m not very fond of the names “guardian” and
“commercial”. I understand where they came from, but I don’t like the
connotations they bring to mind. Let’s call them “political worldview” or
“political thinking” and “practical worldview” or “practical thinking”, and
let’s call the people who predominantly use one or the other “politicians” and
“builders”. It will shortly become clear why.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="relationship-with-truth"&gt;
&lt;h2&gt;Relationship with Truth&lt;/h2&gt;
&lt;p&gt;Every politician knows intimately that truth is always negotiable. It’s
a consensus. You can get away with the most outrageous claims, as long as
you make them confidently, and other people are inclined to let them slide,
usually because objecting would be very inconvenient for them. This is why
they will always try to color the truth to their advantage, and they don’t
even consider this to be lying. And they will also always assume that other
people are doing it all the time as well. Or should be doing it, and it’s
only their own fault if they are not.&lt;/p&gt;
&lt;p&gt;The builders can’t afford to bend truth. They usually work where the rubber
hits the asphalt, and the physical reality doesn’t care about how strongly you
believe something or how convincing you are. You are either right (or close
enough) and things work, or you aren’t, and they fail spectacularly.  Besides,
physical truths are out there for everyone to see. Unless it’s a high energy
physics problem, you can usually do a simple experiment that will easily show
you if you are right or not. Even with high energy physics the experiments can
be replicated and confirmed. So it simply doesn’t make sense to lie about
those things, or even to hide them, because they are in the open for everyone
to see. And finally, unlike with politicians who always assume you are lying
anyways, and who are completely unsurprised when you are caught lying, the
builders care a lot about maintaining trust, and a single lie can ruin your
reputation.&lt;/p&gt;
&lt;p&gt;This points to another clue that can be used to choose which worldview to
choose in a given situation: when you are building something, doing scientific
research, planning a trip, or even just cooking, you are better off with the
practical worldview, because it lets you learn from mistakes and improve your
technique, until it works. On the other hand, if it’s trying to get a building
permit, doing humanist research, recounting your trip, or organizing a party,
you will probably be better off with political thinking, as the success
depends more on other people agreeing with you than on actual physical
reality.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="communication-and-trust"&gt;
&lt;h2&gt;Communication and Trust&lt;/h2&gt;
&lt;p&gt;Builders trust strangers implicitly, at least with low-risk things. With more
successful interactions that trust increases, and everyone builds
a reputation. They also treat all promises seriously, and feel very hurt when
a promise is broken. Even if it’s for something insignificant, it can break
your reputation. Builders will also often communicate without words, by just
doing things and having others decide how to best cooperate with them, if they
want to. This is somewhat similar to what is called stigmergy in ants.&lt;/p&gt;
&lt;p&gt;Politicians never trust other people, because they assume that everybody are
lying all the time anyways. This poses a problem, because you need a certain
amount of trust to cooperate in a society. There are generally two commonly
used solutions for this.&lt;/p&gt;
&lt;p&gt;First, you can put some “skin in the game” to show you really mean what you
are saying. This can be anything that costs you, like a charity donation, a
lavish party, generous gifts or bribes, but often also comes down to violence
or threats of violence. To a politician, nothing underlines your point better
than a brutal attack to get the other party’s attention. Even if the goal is
alliance, this is not malicious, this is just a way they communicate. You can
think about it like a elementary school student trying to get the attention of
a person they like in their class.&lt;/p&gt;
&lt;p&gt;The second way to get some semblance of trust, is to get a third party to
guarantee the agreement, usually by threatening sanctions if it is broken.
This is why politicians love authorities of all kinds – they make it easier
for them to trust each other. Even if the authority in question is corrupt
itself, to a politician it seems better than just trusting the word of the
other side.&lt;/p&gt;
&lt;p&gt;The practical mindset is also at odds with censorship. If you can see the
truth from the world around you, it makes little sense to control what people
talk about. Political mindset regards control of the flow of information as
very important. After all, it doesn’t really matter how things actually are,
but only what people believe they are. If you can control what people believe,
you can control reality. This especially shows in how people approach
scientific publications: the builders will trust the publications that were
detailed and can be reproduced experimentally. Thew politicians will trust the
publications published by authoritative organisations.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="justice-and-force"&gt;
&lt;h2&gt;Justice and Force&lt;/h2&gt;
&lt;p&gt;This brings us to the use of force. As you can guess, builders hate violence,
and generally only use it for self-defence (though the definition of
self-defence can be overly board sometimes). They will hesitantly acknowledge
the need for violence sometimes, but they will not want to have anything to do
with it themselves. It’s distasteful and uncomfortable. Ideally, all conflicts
should be resolved peacefully, and the guilty parties should submit willfully
to whatever punishment (usually in the form of recompense) is necessary.&lt;/p&gt;
&lt;p&gt;Builders believe that the world should be fair, and everybody should start out
with equal rights and opportunities. Some of them will act as if that was
actually true, and fall for the just-world fallacy. Things not being fair is
a big problem for them, and they will work to fix such perceived flaws.&lt;/p&gt;
&lt;p&gt;The politicians don’t mind violence at all, and they will use it casually just
as a way of amplifying their words. They put fundamental human rights in the
same category as the tooth fairy and Santa Claus – it’s obviously false, but
it’s rude to say it aloud, because some children still believe it and it’s
cute. The world belongs to the powerful, and if you can’t defend your
property, then it never was yours in the first place.&lt;/p&gt;
&lt;p&gt;It’s a dog-eat-dog world, and the only way to survive is to be stronger than
the others. Justice is all about demonstrating your power by retaliating, so
punishment have to be public, often over the top, and it doesn’t really matter
if they person being punished is actually guilty. It’s all about demonstrating
what happens to those who step out of line.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="work-and-ownership"&gt;
&lt;h2&gt;Work and Ownership&lt;/h2&gt;
&lt;p&gt;For the builders, your success is comes from the work you do, risks you take,
and deals you make. Everything you have you either earned by working, or
traded for something else you earned (or traded, and so on). Everybody work
together for the common benefit, and make the world a little bit more
convenient and safe. The things you were given don’t really count. Your value
is based on your skill, industry, and entrepreneurship. You become better by
learning skills, acquiring tools, and cooperating and competing.&lt;/p&gt;
&lt;p&gt;For the politicians, your success is your fate. You are a chosen one, destined
for greatness, and your rights and obligations come directly from who you are.
You prove your greatness by defeating others. When you get defeated yourself,
it’s so that you become stronger and more ruthless. The world is a zero-sum
game, and the only way to grow is by taking from others. And you deserve to
grow, because you are the destined future of all of humanity, who will perish
without your leadership. Or something along those lines.&lt;/p&gt;
&lt;p&gt;Work is something dirty to politicians. They are aware that it’s somehow
happening somewhere, but they don’t talk about it, and don’t understand it.
Value comes from owning things: land, factories, subscription services, mines,
data centers, patents, copyrights, stock shares, capital, etc. – owning them
makes you entitled to the resources they produce. Some of them produce more
resources than others, but why and how is a mystery. There is a whole area of
“science” dedicated to explaining the world pretending work doesn’t happen,
and it’s called “economy”.&lt;/p&gt;
&lt;p&gt;If a builder makes something, or works on improving it, or pays for something,
they want to own it (or a part of it). You should own the fruits of your work.
You may, and should, give up some of that to cover the costs of infrastructure
or for social security and the like. Taking something by force is a crime. If
you find lost property, you should return it to the owner, possibly for
a prize.&lt;/p&gt;
&lt;p&gt;A politician owns anything they can control and defend. If you can take
something by force and hold on to it, it’s now yours. If you lose control of
something, it’s free for taking for anyone else. Finders keepers.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="seeing-each-other"&gt;
&lt;h2&gt;Seeing Each Other&lt;/h2&gt;
&lt;p&gt;Politicians view the builders as extremely naive and stupid. They think they
are much smarter and more mature, because they can cheat and trick them. At
the same time they find builders extremely annoying with their insistence on
fairness and owning things they made. They most annoying situation is when the
politics collides with the physical reality, and you absolutely need the
practical worldview to make any sort of progress, so the politicians have to
pander to the builders and pretend to care for what they think, or use
wasteful violence to force them to cooperate.&lt;/p&gt;
&lt;p&gt;The builders see the politicians as evil and tedious. Their constant squabbles
and feuding gets in the way of getting the work done, and their dishonesty
makes it pretty much impossible to do business with them. The fact that
a politician would rather be a king on a ruin than an prosperous person among
equals makes him look like a selfish asshole. When forced to work with them,
builders will often learn to manage the politicians to keep them busy fighting
each other and away from interfering with important work.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="art-and-literature"&gt;
&lt;h2&gt;Art and Literature&lt;/h2&gt;
&lt;p&gt;If I were to pick two genres of literature that show the differences between
the two worldviews, I would pick Fantasy and SciFi.&lt;/p&gt;
&lt;p&gt;If there is a poor boy who is secretly a prince or otherwise destined to rule
and save the world, who then proves their worth by coming out victorious from
different adventures and challenges, defeats both the evil monsters
threatening the kingdom and any competition, and wins, then you are reading
political story. Not surprisingly, pretty much any legend, saga, tale, play,
or epic are political works. Many were directly commissioned by politicians
as means to achieve political goals, such as fame and immortality. (Did
I mention politician believe themselves to be immortal?)&lt;/p&gt;
&lt;p&gt;On the other hand, if there is skilled and smart inventor who in his garage
builds an interdimensional gate, explores other worlds, meets and befriends
strange alien creatures, and is in the end fairly rewarded for his work and
risks, you might have an example of a builder literature.&lt;/p&gt;
&lt;p&gt;There are exceptions. The books of Terry Pratchett, for example, while using
fantasy tropes, are very much builder literature, speaking about fairness,
decency, cooperation and healthy competition, and yes, the incomprehensibly
evil behavior of some selfish people.&lt;/p&gt;
&lt;p&gt;There are also stories that happen is space in the future, but are very much
political in the worldview they present. The entire Warhammer 40k universe is
an example of this. You have knights with swords and lasers, aliens with
pointy ears who use magic, immortal skeleton robots, and priceless artifacts.&lt;/p&gt;
&lt;p&gt;A lot of movie adaptations of SciFi stores often end up more political than
the original stories, because they are re-interpreted by politicians in the
process of adapting for a movie. Any large endeavor like shooting a movie is
going to be dominated with politicians, especially when there is relatively
little hard contact with physical reality. The entertainment industry is
a paradise for them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="good-and-evil"&gt;
&lt;h2&gt;Good and Evil&lt;/h2&gt;
&lt;p&gt;As Jane Jacobs noted, those two worldviews come with two mutually incompatible
moral codes. Each of them will look evil from the point of view of the other,
while it will look good and proper from its own point of view. If I’m painting
the political worldview in darker colors than the practical one, it’s because
of my own biases, and the fact that the political worldview seems to be
dominating the world right now in many areas that could maybe benefit more
from a practical approach.&lt;/p&gt;
&lt;p&gt;The evil comes from three possible sources. First, as Jane Jacobs noted, when
you try to mix the tenets of the two systems, you often get a monstrous
hybrid. Allow commercial deals in your political world view, and you get
bribes and corruption. Allow violence in your practical worldview, and you get
East India Company.&lt;/p&gt;
&lt;p&gt;The second source is when people disagree about which of the systems should be
applied in a given situation. Take for example the ridiculously high salaries
of company CEOs. From a political point of view, they hold a very important
position, with a lot of responsibility, and so they deserve it. In fact,
making their salary higher makes the entire company look more powerful. Of
course from the practical point of view their contribution to the work of the
company is practically non existent, and often even negative, and they could
be replaced with a very simple spreadsheet.&lt;/p&gt;
&lt;p&gt;Finally, there are things that are evil according to both of those worldviews,
and no amount of reasoning is going to excuse them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conclusions"&gt;
&lt;h2&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Where am I going with this? Why am I writing this article at all? Well,
several reasons.&lt;/p&gt;
&lt;p&gt;For one, I wanted to get it off my chest and write it down, so that I can
refer to it later. Second, it might actually help someone else to understand
some otherwise inexplicable behavior of other people. I know it helps me to
navigate politics-rich minefields, mostly to get away from them as fast as
possible.&lt;/p&gt;
&lt;p&gt;Third, I think this might be actionable. As I mentioned, maybe I’m biased, but
I think there is too much political thinking and not enough practical approach
in many areas of modern life. Companies move from selling products to
subscriptions, political parties lean to the right increasingly, science and
art seems to rely increasingly on authority, technical communities are invaded
by evangelists and advocates, and there seems to be a general crisis of trust.&lt;/p&gt;
&lt;p&gt;I have this hope that the situation could be improved somewhat (or maybe even
a lot) by promoting the practical worldview more, and pushing to use that
worldview in more situations. To “embody” and “ground” the thinking, bringing
it closer to physical reality and verifiable facts. To reject cynicism and
cruelty of the politicians, and embrace the welcoming and trust of the
builders. I think it’s a cultural shift that we need. We need more builder
media, more books, movies, comics, stories, and games that embrace the
practical worldview.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="http://dopieralski.pl/posts/2025-05-09-politics/" rel="alternate"/>
    <summary>Before we were somewhat brutally brought into the loving embrace of the Roman
Catholic Church by our considerate neighbours, my country had its own “pagan”
religion, with its own mythology and traditions. A lot of the traditions
survive in some way, because you can’t tell people they no longer have
a holiday on a given day just because they are worshipping a different god
now, but most information about the beliefs of my ancestors have been
judiciously eradicated by the same people who were at the time responsible for
preserving history – the chroniclers were mostly priests at the time, after
all. Some of it has been reconstructed from mentions in various historical
texts, but there is very little that is certain. Which is a great shame,
because those “primitive” mythologies often were records of knowledge about
the world and its workings, presented in a form that is easy for people to
understand – attitudes and relationships. That’s why gods in them are mostly
humans with special powers connected with the nature. And that “pagan”
mythology could tell us a lot about how the society functioned back then.</summary>
    <published>2025-05-09T00:00:00+02:00</published>
  </entry>
</feed>
